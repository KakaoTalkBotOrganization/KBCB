{
    "result": {
        "article": {
            "commentCount": 0,
            "contentElements": [],
            "contentHtml": "<p>끝말잇기 소스인데 끝말잇기 시작하면 잠시후 시작합니다 라고뜨고 시작을 안하네요 뭐가문제일까요</p><p>importPackage(javax.net.ssl);\r\n</p><p>importPackage(java.lang);\r\n</p><p>importPackage(java.net);\r\n</p><p>importPackage(java.io);\r\n</p><p>&nbsp;</p><p>importPackage(org.jsoup);\r\n</p><p>&nbsp;</p><p>/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>const sdcard = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();\r\n</p><p>&nbsp;</p><p>const GAME_TIMER_OUT   = 15;\r\n</p><p>const GAME_WORD_FILTER = [];\r\n</p><p>const ROOM_TIMER_OUT   = 60;\r\n</p><p>const BOT_DELAY_TIME   = 1;\r\n</p><p>&nbsp;</p><p>/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>let gamePlayerList = [], // 플레이어 목록\r\n</p><p>&nbsp;gamePlayerData = {}, // 플레이어 데이터\r\n</p><p>&nbsp;</p><p>&nbsp;gameStartTime = 0,  // 게임 시작 시간\r\n</p><p>&nbsp;gamePlayTime = 0,  // 게임 플레이 시간\r\n</p><p>&nbsp;</p><p>&nbsp;gameUsedWord = [],  // 사용된 단어\r\n</p><p>&nbsp;gameLastChar = &quot;&quot;,  // 매칭 확인용 글자 (사[과] -&gt; [과]자)\r\n</p><p>&nbsp;gamePower = false,  // 게임 전원\r\n</p><p>&nbsp;gameRound = 1,   // 게임 라운드\r\n</p><p>&nbsp;gameStop = true,  // 게임 일시정지\r\n</p><p>&nbsp;gameTurn = 1,   // 게임 턴\r\n</p><p>&nbsp;</p><p>&nbsp;modeOwnCom = true,  // 한방단어 모드\r\n</p><p>&nbsp;</p><p>&nbsp;gameTimerCount = 0,  // 타이머 카운트\r\n</p><p>&nbsp;gameTimerStop = false, // 타이머 일시정지\r\n</p><p>&nbsp;gameTimerPower = true, // 타이머 전원\r\n</p><p>&nbsp;</p><p>&nbsp;roomName = &quot;&quot;,   // 방 이름\r\n</p><p>&nbsp;roomCreat = false,  // 방 생성 여부\r\n</p><p>&nbsp;roomTimerCount = 0,  // 방 타이머 카운트\r\n</p><p>&nbsp;roomTimerPower = true,  // 방 타이머 전원\r\n</p><p>&nbsp;</p><p>&nbsp;aiLevel = 0,    // AI 난이도\r\n</p><p>&nbsp;aiName = &quot;AI:&quot;,   // AI 이름\r\n</p><p>&nbsp;aiCreat = false,   // AI 생성 여부\r\n</p><p>&nbsp;aiPower = false;   // AI 전원\r\n</p><p>&nbsp;</p><p>/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>const Bot = {};\r\n</p><p>&nbsp;</p><p>const PHP =\r\n</p><p>{\r\n</p><p>&nbsp;getData : function(type, value)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; // Https 허용\r\n</p><p>&nbsp;</p><p>&nbsp; if (android.os.Build.VERSION.SDK_INT &gt; 9) \r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;var policy = new android.os.StrictMode.ThreadPolicy.Builder().permitAll().build();\r\n</p><p>&nbsp; &nbsp; android.os.StrictMode.setThreadPolicy(policy);\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; // javax.net.ssl.SSLHandshakeException (SSL 인증서 오류 방지)\r\n</p><p>&nbsp;</p><p>&nbsp; let sslContext = SSLContext.getInstance(&quot;SSL&quot;);\r\n</p><p>&nbsp; sslContext.init(null, [new JavaAdapter(X509TrustManager, {\r\n</p><p>&nbsp; &nbsp;getAcceptedIssuers : () =&gt; { return null; }, \r\n</p><p>&nbsp; &nbsp;checkClientTrusted : () =&gt; { return ; },\r\n</p><p>&nbsp; &nbsp;checkServerTrusted : () =&gt; { return ; }, \r\n</p><p>&nbsp; })], new java.security.SecureRandom());\r\n</p><p>&nbsp;</p><p>&nbsp; HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());\r\n</p><p>&nbsp; HttpsURLConnection.setDefaultHostnameVerifier(new JavaAdapter(HostnameVerifier, {verify : (hostname, session) =&gt; { return true; }}));\r\n</p><p>&nbsp;</p><p>&nbsp; let connect = new URL(&quot;https://ttyy3388.josbar.io/getData.php?type=&quot; + type + ((value) ? &quot;&amp;value=&quot; + value : &quot;&quot;)).openConnection();\r\n</p><p>&nbsp;</p><p>&nbsp; if(connect != null)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;connect.setConnectTimeout(5000);\r\n</p><p>&nbsp; &nbsp;connect.setUseCaches(false);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;var inputStreamReader = new InputStreamReader(connect.getInputStream()),\r\n</p><p>&nbsp; &nbsp; bufferedReader = new BufferedReader(new InputStreamReader(connect.getInputStream())),\r\n</p><p>&nbsp; &nbsp; text = bufferedReader.readLine(), line = &quot;&quot;;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;while((line = bufferedReader.readLine()) != null)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; text += &quot;\\n&quot; + line;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;inputStreamReader.close();\r\n</p><p>&nbsp; &nbsp;bufferedReader.close();\r\n</p><p>&nbsp; &nbsp;connect.disconnect();\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; return text.toString();\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;postData : function(type, value)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; Jsoup.connect(&quot;https://ttyy3388.josbar.io/postData.php&quot;).data(&quot;type&quot;, type, &quot;value&quot;, value).method(Connection.Method.POST).execute().parse();\r\n</p><p>&nbsp;},\r\n</p><p>};\r\n</p><p>&nbsp;</p><p>const DB = \r\n</p><p>{\r\n</p><p>&nbsp;StartWord : {}, // JSON Object\r\n</p><p>&nbsp;GameData : {}, // JSON Object\r\n</p><p>&nbsp;WordList : [], // JSON Array\r\n</p><p>&nbsp;</p><p>&nbsp;load : () =&gt;\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; DB.StartWord = JSON.parse(PHP.getData(&quot;StartWord&quot;, null));\r\n</p><p>&nbsp; DB.WordList = JSON.parse(PHP.getData(&quot;WordList&quot;, null));\r\n</p><p>&nbsp; DB.GameData = JSON.parse(PHP.getData(&quot;GameData&quot;, null));\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;getWordMean : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; return ((DB.isWord(word)) ? JSON.parse(PHP.getData(&quot;WordMean&quot;, word)) : null);\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getDoumChar : function(lastChar)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let data = lastChar.charCodeAt() - 0xAC00;\r\n</p><p>&nbsp; if (data &lt; 0 || data &gt; 11171) return ;\r\n</p><p>&nbsp;</p><p>&nbsp; const RIEUL_TO_NIEUN = [4449, 4450, 4457, 4460, 4462, 4467];\r\n</p><p>&nbsp; const RIEUL_TO_IEUNG = [4451, 4455, 4456, 4461, 4466, 4469];\r\n</p><p>&nbsp; const NIEUN_TO_IEUNG = [4455, 4461, 4466, 4469];\r\n</p><p>&nbsp;</p><p>&nbsp; let onset = Math.floor(data / 28 / 21) + 0x1100,\r\n</p><p>&nbsp; &nbsp;nucleus = (Math.floor(data / 28) % 21) + 0x1161, \r\n</p><p>&nbsp; &nbsp;coda = (data % 28) + 0x11A7, isDoumChar = false, doumChar;\r\n</p><p>&nbsp;</p><p>&nbsp; if (onset == 4357)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;isDoumChar = true;\r\n</p><p>&nbsp; &nbsp;(RIEUL_TO_NIEUN.indexOf(nucleus) != -1) ? onset = 4354 : (RIEUL_TO_IEUNG.indexOf(nucleus) != -1) ? onset = 4363 : isDoumChar = false;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else if (onset == 4354)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (NIEUN_TO_IEUNG.indexOf(nucleus) != -1)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; onset = 4363;\r\n</p><p>&nbsp; &nbsp; isDoumChar = true;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; if (isDoumChar)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;onset -= 0x1100; nucleus -= 0x1161; coda -= 0x11A7;\r\n</p><p>&nbsp; &nbsp;doumChar = String.fromCharCode(((onset * 21) + nucleus) * 28 + coda + 0xAC00);\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; return doumChar;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getWordMeanMessage : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; if (DB.isWord(word))\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;let mean = DB.getWordMean(word)[0];\r\n</p><p>&nbsp; &nbsp;return (mean.length &gt; 30) ? mean.substr(0, 25) + &quot;..&quot; : mean;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;return null;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getWordMeanListMessage : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; if (DB.isWord(word))\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;let meanList = DB.getWordMean(word);\r\n</p><p>&nbsp; &nbsp; len = meanList.length, text = [];\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;for (i = 0 ; i &lt; len ; i ++)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; text[i] = &quot;「&quot; + java.lang.String.format(&quot;%03d&quot;, Integer(i + 1)) + &quot;」「명사」 &quot; + meanList[i];\r\n</p><p>&nbsp; &nbsp; do { text[0] += &quot;\\u200b&quot;.repeat(500); } while (false)\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;return text.join(&quot;\\n\\n&quot;);\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;return null;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getRandomWord : function()\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; return DB.WordList[Math.floor(Math.random() * DB.WordList.length)];\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getRandomStartWord : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let list = Object.keys(DB.StartWord);\r\n</p><p>&nbsp;</p><p>&nbsp; while (true)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;result = list[Math.floor(Math.random() * list.length)];\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (DB.StartWord[result].length &gt; 1000)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; break;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; return result;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getFirstChar : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; return word[0];\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getLastChar : function(word) \r\n</p><p>&nbsp;{ \r\n</p><p>&nbsp; return word[word.length - 1]; \r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getLastCharMessage : function(lastChar) \r\n</p><p>&nbsp;{ \r\n</p><p>&nbsp; return lastChar = (DB.getDoumChar(lastChar)) ? lastChar + &quot;(&quot; + DB.getDoumChar(lastChar) + &quot;)&quot; : lastChar; \r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;isLoaded : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; return (Object.keys(DB.StartWord).length &amp;&amp; Object.keys(DB.WordList).length &amp;&amp; Object.keys(DB.GameData).length) ? true : false;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;isWord : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; return DB.WordList.indexOf(word) != -1;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;isUsedWord : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; return gameUsedWord.indexOf(word) != -1;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;isStartWord : function(startWord)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; return DB.StartWord[startWord] ? true : false;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;isOwnComWord : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; if (DB.isStartWord(DB.getLastChar(word))) return false;\r\n</p><p>&nbsp; else return (DB.isStartWord(DB.getDoumChar(DB.getLastChar(word)))) ? false : ((modeOwnCom) ? false : true);\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;isForbiddenWord : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; return GAME_WORD_FILTER.indexOf(word) != -1;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;isSuitableWord : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; if (!word) \r\n</p><p>&nbsp; { \r\n</p><p>&nbsp; &nbsp;Bot.replyRoom(&quot;단어를 입력 해 주세요.&quot;);\r\n</p><p>&nbsp; &nbsp;return false; \r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else if (word.length &lt; 2)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Bot.replyRoom(&quot;두 글자 이상의 단어를 입력 해 주세요.&quot;); \r\n</p><p>&nbsp; &nbsp;return false; \r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else if (DB.isForbiddenWord(word))\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Bot.replyRoom(word + &quot;(은)는 금칙어 입니다.&quot;);\r\n</p><p>&nbsp; &nbsp;return false;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else if (DB.isUsedWord(word))\r\n</p><p>&nbsp; { \r\n</p><p>&nbsp; &nbsp;Bot.replyRoom(&quot;이미 사용한 단어 입니다.&quot;); \r\n</p><p>&nbsp; &nbsp;return false;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (!DB.isWord(word))\r\n</p><p>&nbsp; &nbsp;{ \r\n</p><p>&nbsp; &nbsp; Bot.replyRoom(&quot;\\&quot;&quot; + word + &quot;\\&quot; (은)는 명사가 아니거나 사전에 등록되지 않은 단어입니다.&quot;);\r\n</p><p>&nbsp; &nbsp; return false;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else if (DB.isOwnComWord(word))\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Bot.replyRoom(&quot;현재 한방 단어가 금지된 상태입니다.&quot;);\r\n</p><p>&nbsp; &nbsp; return false;\r\n</p><p>&nbsp; &nbsp;}   \r\n</p><p>&nbsp; &nbsp;else if (gameLastChar != DB.getFirstChar(word))\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; if (DB.getDoumChar(gameLastChar) == DB.getFirstChar(word))\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;return true;\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; else\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom(DB.getLastCharMessage(gameLastChar) + &quot;(으)로 시작하는 단어를 입력 해 주세요.&quot;); \r\n</p><p>&nbsp; &nbsp; &nbsp;return false;\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; return true;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>};\r\n</p><p>&nbsp;</p><p>const AI = \r\n</p><p>{\r\n</p><p>&nbsp;getWord : function(lastChar)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let startWordData = DB.StartWord[lastChar],\r\n</p><p>&nbsp; &nbsp;startDoumWord = DB.StartWord[DB.getDoumChar(lastChar)];\r\n</p><p>&nbsp;</p><p>&nbsp; if (startWordData)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (startDoumWord)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; startWordData = (startWordData + &quot;,&quot; + startDoumWord).split(&quot;,&quot;);\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (startDoumWord)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; startWordData = startDoumWord;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else return null;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; let startWordList = [],   // @로 시작하는 단어 리스트\r\n</p><p>&nbsp; &nbsp;startWordLastChar = [],  // @로 시작하는 단어의 끝 글자\r\n</p><p>&nbsp; &nbsp;startWordDoumChar = null,   // @로 시작하는 단어의 끝 글자 (두음 적용)\r\n</p><p>&nbsp; &nbsp;startWordStartWord = [],    // @로 시작하는 단어의 끝 글자로 시작하는 단어\r\n</p><p>&nbsp; &nbsp;startWordStartWordNum = [], // @로 시작하는 단어의 끝 글자로 시작하는 단어의 갯수\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;easyValue = 0, normalValue = 0, hardValue = 0,\r\n</p><p>&nbsp; &nbsp;easyCount = 0, normalCount = 0, hardCount = 0,\r\n</p><p>&nbsp; &nbsp;easyLevel = [], normalLevel = [], hardLevel = [],\r\n</p><p>&nbsp; &nbsp;easyWord = null, normalWord = null, hardWord = null, replyWord = null,\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;/*\r\n</p><p>&nbsp; &nbsp; easyValue   = 51% ~ 100%\r\n</p><p>&nbsp; &nbsp; normalValue = 21% ~ 50%\r\n</p><p>&nbsp; &nbsp; hardValue   = 00% ~ 20%\r\n</p><p>&nbsp; &nbsp;*/\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;len = startWordData.length,\r\n</p><p>&nbsp; &nbsp;maxValue = 0, count = 0, i;\r\n</p><p>&nbsp;</p><p>&nbsp; for (i = 0 ; i &lt; len ; i ++)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;startWordLastChar[i] = startWordData[i][startWordData[i].length - 1];\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (gameUsedWord.indexOf(startWordData[i]) == -1)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; startWordList[count ++] = startWordData[i];\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; for (i = 0 ; i &lt; count ; i ++)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;startWordDoumChar = DB.getDoumChar(startWordLastChar[i]);\r\n</p><p>&nbsp; &nbsp;startWordStartWord = DB.StartWord[startWordLastChar[i]];\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (!startWordStartWord) { if (startWordDoumChar) startWordStartWord = DB.StartWord[startWordDoumChar]; }\r\n</p><p>&nbsp; &nbsp;else { if (startWordDoumChar) startWordStartWord = (startWordStartWord + &quot;,&quot; + DB.StartWord[startWordDoumChar]).split(&quot;,&quot;); }\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;startWordStartWordNum[i] = 0;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (startWordStartWord)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; startWordStartWordNum[i] = startWordStartWord.length;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; if (maxValue &lt; startWordStartWordNum[i])\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;maxValue = startWordStartWordNum[i];\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; easyValue = maxValue * 0.5;\r\n</p><p>&nbsp; hardValue = maxValue * 0.2;\r\n</p><p>&nbsp;</p><p>&nbsp; len = startWordList.length;\r\n</p><p>&nbsp;</p><p>&nbsp; for (i = 0 ; i &lt; len ; i ++)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (easyValue &lt; startWordStartWordNum[i])\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; easyLevel[easyCount ++] = startWordList[i];\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else if (hardValue &lt; startWordStartWordNum[i] &amp;&amp; startWordStartWordNum[i] &gt;= easyCount)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; normalLevel[normalCount ++] = startWordList[i];\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; hardLevel[hardCount ++] = startWordList[i];\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; let getWord = (array) =&gt; \r\n</p><p>&nbsp; &nbsp;{ \r\n</p><p>&nbsp; &nbsp; let data = [], len = array.length, count = 0, temp = &quot;&quot;, i, j;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; for (i = 0 ; i &lt; len ; i ++)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;if (Object.keys(DB.GameData).indexOf(array[i]) != -1)\r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; data[count ++] = array[i];\r\n</p><p>&nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; if (count == 1)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;return data[0];\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; else if (count &gt;= 2)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;/*\r\n</p><p>&nbsp; &nbsp; &nbsp;for (i = 0 ; i &lt; count - 1 ; i ++)\r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; for (j = i + 1 ; j &lt; count ; j ++)\r\n</p><p>&nbsp; &nbsp; &nbsp; { \r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;if (DB.GameData[data[i]].Num &lt; DB.GameData[data[j]].Num)\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; temp = data[j];\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; data[j] = data[i];\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; data[i] = temp;\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; &nbsp;} */\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;return data[Math.floor(Math.random() * count)];\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; else\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;return array[Math.floor(Math.random() * len)];\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;};\r\n</p><p>&nbsp;</p><p>&nbsp; switch (aiLevel)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;case 3 : \r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; replyWord = (hardCount) ? getWord(hardLevel) : \r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;(normalCount) ? getWord(normalLevel) :\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;(easyCount) ? getWord(easyLevel) : null;\r\n</p><p>&nbsp; &nbsp; break;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;case 2 :\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; replyWord = (normalCount) ? getWord(normalLevel) :\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;(easyCount) ? getWord(easyLevel) : null;\r\n</p><p>&nbsp; &nbsp; break;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;case 1 :\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; replyWord = (easyCount) ? getWord(easyLevel) : null;\r\n</p><p>&nbsp; &nbsp; break;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; return replyWord;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getReply : function(lastChar)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let aiWord = AI.getWord(lastChar);\r\n</p><p>&nbsp;</p><p>&nbsp; if (!aiWord)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Thread.sleep(BOT_DELAY_TIME * 1000);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (gamePlayerList.length == 2)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;[ &quot; + aiName + &quot; ] 가 입력 할 단어가 없어 아웃됩니다.\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;승자는 [ &quot; + Game.getNextPlayer() + &quot; ] 님 입니다!&quot;\r\n</p><p>&nbsp; &nbsp; );\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; Game.off();\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Game.setPlayerDelete(aiName);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; Bot.replyRoom(&quot;[ &quot; + aiName + &quot; ] 가 입력 할 단어가 없어 아웃됩니다.&quot;);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;[ &quot; + Game.getNowPlayer() + &quot; ] 님은 새로운 단어를 입력해 주세요\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;&lt; 남은 플레이어 &gt;\\n&quot; + Game.getPlayerListMessage()\r\n</p><p>&nbsp; &nbsp; );\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;gameLastChar = DB.getLastChar(aiWord);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;Thread.sleep(BOT_DELAY_TIME * 1000);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;Bot.replyRoom(&quot;[ &quot; + aiName +&quot; ] : &quot; + aiWord);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;Bot.replyRoom\r\n</p><p>&nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &quot;&lt; &quot; + DB.getWordMeanMessage(aiWord) + &quot; &gt;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;[ &quot; + aiName + &quot; ] 가 \\&quot;&quot; + aiWord + &quot;\\&quot;단어를 입력했습니다.\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;[ &quot; + Game.getNextPlayer() + &quot; ] 님은 \\&quot;&quot; + DB.getLastCharMessage(gameLastChar) + &quot;\\&quot;(으)로 시작하는 단어를 입력해 주세요&quot;\r\n</p><p>&nbsp; &nbsp;);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;Game.setNextEvent(aiWord);\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getRandomReply : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let randomWord = &quot;&quot;;\r\n</p><p>&nbsp;</p><p>&nbsp; while (true)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;randomWord = DB.getRandomWord();\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (DB.isOwnComWord(randomWord) || DB.isUsedWord(randomWord))\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; randomWord = DB.getRandomWord();\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else \r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; AI.getReply(DB.getLastChar(randomWord));\r\n</p><p>&nbsp; &nbsp; break;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;isAITurn : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; if (aiPower &amp;&amp; (Game.getNowPlayer() == aiName)) \r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;return true;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;}\r\n</p><p>};\r\n</p><p>&nbsp;</p><p>const Game = \r\n</p><p>{\r\n</p><p>&nbsp;start : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; DB.load();\r\n</p><p>&nbsp;</p><p>&nbsp; gameStartTime = \r\n</p><p>&nbsp; &nbsp;((new Date().getHours() &gt; 12) ? &quot;오후 &quot; + \r\n</p><p>&nbsp; &nbsp;(new Date().getHours() - 12) : &quot;오전 &quot;) +\r\n</p><p>&nbsp; &nbsp;new Date().getHours() + &quot;시 &quot; + new Date().getMinutes() + &quot;분&quot;;\r\n</p><p>&nbsp;</p><p>&nbsp; gamePlayTime = new Date().getTime();\r\n</p><p>&nbsp; gameLastChar = DB.getRandomStartWord();\r\n</p><p>&nbsp; gamePower = true;\r\n</p><p>&nbsp;</p><p>&nbsp; Game.startGameTimer();\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;off : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; gamePlayerData = [];\r\n</p><p>&nbsp; gamePlayerList = [];\r\n</p><p>&nbsp; gamePlayerLife = [];\r\n</p><p>&nbsp;</p><p>&nbsp; gameStartTime = 0;\r\n</p><p>&nbsp; gamePlayTime = 0;\r\n</p><p>&nbsp;</p><p>&nbsp; gameUsedWord = [];\r\n</p><p>&nbsp; gameLastChar = &quot;&quot;;\r\n</p><p>&nbsp; gamePower = false;\r\n</p><p>&nbsp; gameFirst = true;\r\n</p><p>&nbsp; gameTurn = 1;\r\n</p><p>&nbsp;</p><p>&nbsp; gameTimerCount = 0;\r\n</p><p>&nbsp; gameTimerStop = false;\r\n</p><p>&nbsp; gameTimerPower = false;\r\n</p><p>&nbsp;</p><p>&nbsp; roomName = &quot;&quot;;\r\n</p><p>&nbsp; roomCreat = false;\r\n</p><p>&nbsp; roomTimerCount = 0;\r\n</p><p>&nbsp; roomTimerPower = false;\r\n</p><p>&nbsp;</p><p>&nbsp; aiLevel = 0;\r\n</p><p>&nbsp; aiName = &quot;AI:&quot;;\r\n</p><p>&nbsp; aiCreat = false;\r\n</p><p>&nbsp; aiPower = false;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;restart : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; for (let i of gamePlayerData)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;gamePlayerData[i][&apos;Score&apos;] = 0;\r\n</p><p>&nbsp; &nbsp;gamePlayerData[i][&apos;Life&apos;] = 3;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; gameTimerCount = 0;\r\n</p><p>&nbsp; gameUsedWord = []; \r\n</p><p>&nbsp; gameLastChar = &quot;&quot;;\r\n</p><p>&nbsp; gameFirst = true;\r\n</p><p>&nbsp; gameTurn = 1;\r\n</p><p>&nbsp;</p><p>&nbsp; gameTimerCount = 0;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;/* ----------------------------------- Timer ---------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;startGameTimer : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; gameTimerPower = true;\r\n</p><p>&nbsp;</p><p>&nbsp; new Thread \r\n</p><p>&nbsp; ({ \r\n</p><p>&nbsp; &nbsp;run : function() { try \r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; while (gameTimerPower)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Thread.sleep(1000);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;if (gameTimerCount &gt;= GAME_TIMER_OUT)\r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; Game.setPlayerTimeOut();\r\n</p><p>&nbsp; &nbsp; &nbsp; gameTimerCount = 0;\r\n</p><p>&nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp; &nbsp;else \r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; gameTimerCount ++;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; if (gameTimerCount == 5) \r\n</p><p>&nbsp; &nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;Bot.replyRoom(&quot;10초 남았습니다.&quot;); \r\n</p><p>&nbsp; &nbsp; &nbsp; } \r\n</p><p>&nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;catch(e) \r\n</p><p>&nbsp; &nbsp;{ \r\n</p><p>&nbsp; &nbsp; Bot.reply\r\n</p><p>&nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;GAME TIMER ERROR\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;Error : &quot; + e \r\n</p><p>&nbsp; &nbsp; );\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }}).start();\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;startRoomTimer : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; roomTimerPower = true;\r\n</p><p>&nbsp;</p><p>&nbsp; new Thread\r\n</p><p>&nbsp; ({ \r\n</p><p>&nbsp; &nbsp;run : function() { try\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; while (roomTimerPower)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Thread.sleep(1000);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;if ((roomTimerCount &gt;= ROOM_TIMER_OUT) &amp;&amp; (!gamePower))\r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; Bot.replyRoom(&quot;60초가 지나 자동으로 방을 삭제합니다.&quot;);\r\n</p><p>&nbsp; &nbsp; &nbsp; Game.off(); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp; &nbsp;else \r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; roomTimerCount ++; \r\n</p><p>&nbsp; &nbsp; &nbsp; (roomTimerCount == 30) ? Bot.replyRoom(&quot;30초 후 방이 삭제됩니다.&quot;) : \r\n</p><p>&nbsp; &nbsp; &nbsp; (roomTimerCount == 50) ? Bot.replyRoom(&quot;10초 후 방이 삭제됩니다.&quot;) : null;\r\n</p><p>&nbsp; &nbsp; &nbsp;} \r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;catch(e) \r\n</p><p>&nbsp; &nbsp;{ \r\n</p><p>&nbsp; &nbsp; Bot.reply\r\n</p><p>&nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;ROOM TIMER ERROR\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;Error : &quot; + e \r\n</p><p>&nbsp; &nbsp; );\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }}).start();\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;stopGameTimer : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; gameTimerCount = 0;\r\n</p><p>&nbsp; gameTimerPower = false;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;stopRoomTimer : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; roomTimerCount = 0;\r\n</p><p>&nbsp; roomTimerPower = false;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;/* ----------------------------------- Room ----------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;setRoomCreat : function(room)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; roomName = room;\r\n</p><p>&nbsp; roomCreat = true;\r\n</p><p>&nbsp; roomTimerPower = true;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;/* ---------------------------------- Print ----------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;getPlayerListMessage : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let list = [&quot;첫&quot;, &quot;두&quot;, &quot;세&quot;, &quot;네&quot;, &quot;다섯&quot;, &quot;여섯&quot;, &quot;일곱&quot;, &quot;여덟&quot;, &quot;아홉&quot;, &quot;열&quot;], text = [], len = gamePlayerList.length, i;\r\n</p><p>&nbsp; for (i = 0 ; i &lt; len ; i ++)  { text[i] = &quot;○ &quot; + list[i] + &quot;번째 : &quot; + gamePlayerList[i]; }\r\n</p><p>&nbsp;</p><p>&nbsp; return text.join(&quot;\\n&quot;);\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;getPlayerPosition : function(player) \r\n</p><p>&nbsp;{ \r\n</p><p>&nbsp; return gamePlayerList.indexOf(player); \r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getNowPlayer : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; &nbsp;return gamePlayerList[gameTurn - 1]; \r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;getNextPlayer : function()\r\n</p><p>&nbsp;{ \r\n</p><p>&nbsp; return gamePlayerList[(gameTurn == gamePlayerList.length) ? 0 : gameTurn]; \r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;setPlayerAdd : function(player)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; gamePlayerList.push(player);\r\n</p><p>&nbsp;</p><p>&nbsp; gamePlayerData[player] = \r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;&apos;Score&apos; : 0,\r\n</p><p>&nbsp; &nbsp;&apos;Life&apos; : 3,\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;setPlayerDelete : function(player) \r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; if (gameTurn == gamePlayerList.length) { Game.setNextTurn(); }\r\n</p><p>&nbsp;</p><p>&nbsp; gamePlayerList.splice(Game.getPlayerPosition(player), 1);\r\n</p><p>&nbsp; gameTimerCount = 0;\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;setPlayerExit : function(player)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let nowPlayer = Game.getNowPlayer(),\r\n</p><p>&nbsp; &nbsp;nextPlayer = Game.getNextPlayer();\r\n</p><p>&nbsp;</p><p>&nbsp; if (gamePlayerList.length == 2)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Bot.replyRoom(&quot;승자는 [ &quot; + nextPlayer + &quot; ] 님 입니다!&quot;);\r\n</p><p>&nbsp; &nbsp;Game.off();\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Game.setPlayerDelete(player);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (nowPlayer == player)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;[ &quot; + nextPlayer + &quot; ] 님은 새로운 단어를 입력해 주세요\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;&lt; 남은 플레이어 &gt;\\n&quot; + Game.getPlayerListMessage()\r\n</p><p>&nbsp; &nbsp; );\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; AI.isAITurn() ? AI.getRandomReply() : null;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; if ((gameTurn - 1) &gt; Game.getPlayerPosition(player))\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;gameTurn -= 1;\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; Bot.replyRoom(&quot;&lt; 남은 플레이어 &gt;\\n&quot; + Game.getPlayerListMessage());\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;setPlayerTimeOut : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; Game.setPlayerLife();\r\n</p><p>&nbsp; (gamePower) ? Game.setPlayerScore(0, null) : null; // 0 : 뺴기, 1 : 더하기\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;setPlayerScore : function(value, word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; if (value)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;gamePlayerData[Game.getNowPlayer()][&apos;Score&apos;] += (20 * (word.length - 1)) + Math.floor(Math.random() * (10 + (gameRound / 10)))\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;let minusValue = Math.floor(Math.random() * (10 * (gameRound / 2)));\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (gamePlayerData[Game.getNowPlayer()][&apos;Score&apos;] &gt; 0)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; if (gamePlayerData[Game.getNowPlayer()][&apos;Score&apos;] - minusValue &lt; 0)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;gamePlayerData[Game.getNowPlayer()][&apos;Score&apos;] = 0\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; else\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;gamePlayerData[Game.getNowPlayer()][&apos;Score&apos;] -= minusValue;\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;// Life 감소 방식에서 Score 감소 방식으로 변경 (3번 라이프 감소 시 탈락으로)\r\n</p><p>&nbsp;setPlayerLife : function()\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let nowPlayer = Game.getNowPlayer(),\r\n</p><p>&nbsp; &nbsp;nextPlayer = Game.getNextPlayer();\r\n</p><p>&nbsp;</p><p>&nbsp; gamePlayerData[nowPlayer][&apos;Life&apos;] -= 1;\r\n</p><p>&nbsp;</p><p>&nbsp; if (gamePlayerData[nowPlayer][&apos;Life&apos;] &gt; 0)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Bot.replyRoom\r\n</p><p>&nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &quot;&lt; 시간 초과 &gt;\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &quot;[ &quot; + nowPlayer + &quot; ] 님의 라이프가 1 감소합니다.\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &quot;남은 라이프 : &quot; + gamePlayerData[nowPlayer][&apos;Life&apos;]\r\n</p><p>&nbsp; &nbsp;);\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (gamePlayerList.length == 2)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;&lt; 시간 초과 &gt;\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;[ &quot; + nowPlayer + &quot; ] 님이 라이프가 0이 되어 게임을 종료합니다.\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;승자는 [ &quot; + nextPlayer + &quot; ] 님 입니다!&quot;\r\n</p><p>&nbsp; &nbsp; );\r\n</p><p>&nbsp; &nbsp; Game.off();\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Game.setPlayerDelete(nowPlayer);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; ( \r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;&lt; 시간 초과 &gt;\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;[ &quot; + nowPlayer + &quot; ] 님이 라이프가 0이 되어 아웃되었습니다.&quot;\r\n</p><p>&nbsp; &nbsp; );\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;[ &quot; + nextPlayer + &quot; ] 님은 새로운 단어를 입력해 주세요\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &nbsp;&quot;&lt; 남은 플레이어 &gt;\\n&quot; + Game.getPlayerListMessage()\r\n</p><p>&nbsp; &nbsp; );\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; AI.isAITurn() ? AI.getRandomReply() : null;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;}, \r\n</p><p>&nbsp;</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;setNextTurn : function() \r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; gameTimerCount = 0;\r\n</p><p>&nbsp;</p><p>&nbsp; if (gameTurn == gamePlayerList.length)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;gameRound ++;\r\n</p><p>&nbsp; &nbsp;gameTurn = 1;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;gameTurn += 1;\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;setNextEvent : function(word)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; gameUsedWord.push(word); \r\n</p><p>&nbsp; Game.setPlayerScore(1, word);   \r\n</p><p>&nbsp; Game.setNextTurn();\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;/* ---------------------------------------------------------------------------- */\r\n</p><p>&nbsp;</p><p>&nbsp;main : function(room, message, sender)\r\n</p><p>&nbsp;{   \r\n</p><p>&nbsp; let isGameWord = message.substr(0, 2) == &quot;::&quot;,\r\n</p><p>&nbsp; &nbsp;isCommand = message.charAt(0) == &quot;/&quot;;\r\n</p><p>&nbsp;</p><p>&nbsp; (isCommand) ? Game.command(room, message, sender) : &quot;&quot;;\r\n</p><p>&nbsp;</p><p>&nbsp; if (gamePower &amp;&amp; isGameWord)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;let word = message.substring(2).trim(),\r\n</p><p>&nbsp; &nbsp; len  = gamePlayerList.length, num = 0;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;for (num = 0 ; num &lt; len ; num ++) \r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; if ((sender == gamePlayerList[num]) &amp;&amp; ((gameTurn - 1) == num)) \r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;if (DB.isSuitableWord(word))\r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; gameLastChar = DB.getLastChar(word);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&quot;&lt; &quot; + DB.getWordMeanMessage(word) + &quot; &gt;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&quot;[ &quot; + Game.getNowPlayer() + &quot; ] 님이 \\&quot;&quot; + word + &quot;\\&quot;단어를 입력하셨습니다.\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp;&quot;[ &quot; + Game.getNextPlayer() + &quot; ] 님은 \\&quot;&quot; + DB.getLastCharMessage(gameLastChar) + &quot;\\&quot;(으)로 시작하는 단어를 입력해 주세요&quot;\r\n</p><p>&nbsp; &nbsp; &nbsp; );\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; PHP.postData(&quot;GameData&quot;, word);\r\n</p><p>&nbsp; &nbsp; &nbsp; Game.setNextEvent(word);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; AI.isAITurn() ? AI.getReply(DB.getLastChar(word)) : null;\r\n</p><p>&nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }\r\n</p><p>&nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp;command : function(room, message, sender)\r\n</p><p>&nbsp;{\r\n</p><p>&nbsp; let command = message.split(&quot; &quot;)[0],\r\n</p><p>&nbsp; &nbsp;input  = message.split(&quot; &quot;)[1],\r\n</p><p>&nbsp; &nbsp;select  = message.split(&quot; &quot;)[2],\r\n</p><p>&nbsp; &nbsp;type  = message.split(&quot; &quot;)[3],\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;printMessage = function(type)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; switch (type) \r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;case 1 : Bot.replyRoom(&quot;이미 생성된 방이 있습니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 2 : Bot.reply(&quot;생성된 방이 없습니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 3 : Bot.reply(&quot;끝말잇기 방이 생성된 채팅방에서만 입력이 가능합니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 4 : Bot.replyRoom(&quot;이미 끝말잇기 게임이 진행중입니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 5 : Bot.replyRoom(&quot;진행중인 게임이 없습니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 6 : Bot.replyRoom(&quot;2명 이상이 참가해야 게임 시작이 가능합니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 7 : Bot.replyRoom(&quot;방장만 입력이 가능합니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 8 : Bot.replyRoom(&quot;중복 참여로 참가가 거부되었습니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 9 : Bot.replyRoom(&quot;2명 이상이 참가해야 게임 시작이 가능합니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 10 : Bot.replyRoom(&quot;생성된 AI가 없습니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; &nbsp;case 11 : Bot.replyRoom(&quot;게임에 참가중인 상태가 아닙니다.&quot;); break;\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;},\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;roomManager  = gamePlayerList[0],\r\n</p><p>&nbsp; &nbsp;roomCheck  = (roomName == room),\r\n</p><p>&nbsp; &nbsp;managerCheck = (roomManager == sender),\r\n</p><p>&nbsp; &nbsp;playerCheck  = (gamePlayerList.indexOf(sender) != -1);\r\n</p><p>&nbsp;</p><p>&nbsp; if (command == &quot;/끝말잇기&quot;) {\r\n</p><p>&nbsp; if (input == &quot;도움말&quot;)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Bot.reply\r\n</p><p>&nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &quot;&lt; 끝말잇기 도움말 &gt;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;● 게임시작 방법 : 생성 &gt; 인원모집 (참가) &gt; 시작\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;● 단어입력 방법 : \\&quot;::단어\\&quot;\\n&quot; + (&quot;\\u200b&quot;.repeat(500)) + &quot;\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;-------------------------------------------------------------\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;/끝말잇기 [생성 / 시작 / 참가 / 기권(자기차례일때만 기권하세요) / 나가기 / 종료]\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;/끝말잇기 [데이터]\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;-------------------------------------------------------------\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;/끝말잇기 AI 대결 [초보, 중수, 고수]\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;/끝말잇기 AI 추가 [초보, 중수, 고수]\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;/끝말잇기 AI 삭제\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;-------------------------------------------------------------\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;/끝말잇기 한방단어 [켜기 / 끄기]\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;-------------------------------------------------------------\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;/끝말잇기 검색 단어 [단어]\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;/끝말잇기 검색 시작단어 [글자]&quot;\r\n</p><p>&nbsp; &nbsp;); \r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; if (input == &quot;데이터&quot;) { if (roomCreat) { if (roomCheck) { if (gamePower)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;let time = Math.floor((new Date().getTime() - gamePlayTime) / 1000),\r\n</p><p>&nbsp; &nbsp; minute = Math.floor(time / 60), second = Math.floor(time % 60),\r\n</p><p>&nbsp; &nbsp; len = gamePlayerList.length, i, j, text = [], temp = &quot;&quot;;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;for (i = 0 ; i &lt; len ; i ++) \r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; text[i] = &quot;○ &quot; + gamePlayerList[i] + &quot; : &quot; + \r\n</p><p>&nbsp; &nbsp; &nbsp;gamePlayerData[gamePlayerList[i]][&apos;Score&apos;] + &quot;S : &quot; + \r\n</p><p>&nbsp; &nbsp; &nbsp;gamePlayerData[gamePlayerList[i]][&apos;Life&apos;] + &quot;L&quot;;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;for (i = 0 ; i &lt; len - 1 ; i ++)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; for (j = i + 1 ; j &lt; len ; j ++)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;if (Number(text[i].split(&quot; : &quot;)[1].split(&quot;S&quot;)[0]) &lt; Number(text[j].split(&quot; : &quot;)[1].split(&quot;S&quot;)[0]))\r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; temp = text[j];\r\n</p><p>&nbsp; &nbsp; &nbsp; text[j] = text[i];\r\n</p><p>&nbsp; &nbsp; &nbsp; text[i] = temp;\r\n</p><p>&nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;Bot.replyRoom\r\n</p><p>&nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &quot;&lt; 현재 게임 상태 &gt;\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &quot;[ 시간 데이터 ]\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;● 시작 시간 : &quot; + gameStartTime + &quot;\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;● 플레이 시간 : &quot; + ((!minute) ? second + &quot;초&quot; : minute + &quot;분 &quot; + second + &quot;초&quot;) + &quot;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;[ 게임 데이터 ]\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &quot;● 플레이어 정보\\n&quot; + text.join(&quot;\\n&quot;) + &quot;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &quot;● 사용한 단어 : &quot; + ((gameUsedWord.length) ? gameUsedWord.length + &quot;개\\n○ &quot; + gameUsedWord.join(&quot; - &quot;) : &quot;아직 사용한 단어가 없습니다.&quot;)\r\n</p><p>&nbsp; &nbsp;);\r\n</p><p>&nbsp; } else printMessage(5); } else printMessage(3); } else printMessage(2); }\r\n</p><p>&nbsp; if (input == &quot;생성&quot;) { if (!roomCreat)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Game.setPlayerAdd(sender);\r\n</p><p>&nbsp; &nbsp;Game.setRoomCreat(room);\r\n</p><p>&nbsp; &nbsp;Game.startRoomTimer();\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;Bot.replyRoom\r\n</p><p>&nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &quot;[ &quot; + sender + &quot; ] 님이 끝말잇기 게임을 생성하였습니다.\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &quot;게임 참가를 원하시면 \\&quot;/끝말잇기 참가\\&quot;를 입력해 주세요.&quot;\r\n</p><p>&nbsp; &nbsp;);\r\n</p><p>&nbsp; } else printMessage(1); }\r\n</p><p>&nbsp; else if (input == &quot;참가&quot;) { if (roomCreat) { if (roomCheck) { if (!gamePower) { if (!playerCheck)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;Game.setPlayerAdd(sender);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;Bot.replyRoom\r\n</p><p>&nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &quot;[ &quot; + sender + &quot; ] 님이 끝말잇기에 참가하셨습니다.\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &quot;현재 참가자 : &quot; + gamePlayerList.join(&quot;, &quot;)\r\n</p><p>&nbsp; &nbsp;);\r\n</p><p>&nbsp; } else printMessage(8); } else printMessage(4); } else printMessage(3); } else printMessage(2); }\r\n</p><p>&nbsp; else if (input == &quot;시작&quot; || input == &quot;종료&quot; || input == &quot;재시작&quot;) { if (roomCreat) { if (roomCheck) { if (managerCheck)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (input == &quot;시작&quot;) { if (!gamePower)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; if (gamePlayerList.length &gt;= 2) \r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Game.stopRoomTimer();\r\n</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom(&quot;잠시 후 게임을 시작합니다!&quot;);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;Game.start();\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &nbsp; &quot;게임을 시작합니다!\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; &quot;&lt; 플레이어 목록 &gt;\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; Game.getPlayerListMessage() + &quot;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; &quot;[ &quot; + roomManager + &quot; ] 님은 \\&quot;&quot; + DB.getLastCharMessage(gameLastChar) + &quot;\\&quot;(으)로 시작하는 단어를 입력해 주세요&quot;\r\n</p><p>&nbsp; &nbsp; &nbsp;);\r\n</p><p>&nbsp; &nbsp; } else printMessage(9); } else printMessage(4); \r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else if (input == &quot;종료&quot; || input == &quot;재시작&quot;) { if (gamePower) \r\n</p><p>&nbsp; &nbsp;{ \r\n</p><p>&nbsp; &nbsp; if (input == &quot;종료&quot;)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom(&quot;게임이 종료됩니다.&quot;);\r\n</p><p>&nbsp; &nbsp; &nbsp;Game.off();\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; else if (input == &quot;재시작&quot;)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom(&quot;현재 인원으로 게임을 재시작합니다.&quot;);\r\n</p><p>&nbsp; &nbsp; &nbsp;Game.restart();\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;} else printMessage(5); } else printMessage(7); } else printMessage(3); } else printMessage(2); } \r\n</p><p>&nbsp; }\r\n</p><p>&nbsp; else if (input == &quot;기권&quot; || input == &quot;나가기&quot;) { if (roomCreat) { if (roomCheck) { if(gamePower) { if(playerCheck)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (input == &quot;기권&quot;)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Bot.replyRoom(&quot;[ &quot; + sender + &quot; ] 님이 게임을 기권했습니다.&quot;);\r\n</p><p>&nbsp; &nbsp; Game.setPlayerExit(sender);\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else if (input == &quot;나가기&quot;)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Object.keys(gamePlayerData)[Game.getPlayerPosition(sender)] = null;\r\n</p><p>&nbsp; &nbsp; Bot.replyRoom(&quot;[ &quot; + sender + &quot; ] 님이 게임을 나갔습니다.&quot;);\r\n</p><p>&nbsp; &nbsp; Game.setPlayerExit(sender);\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; } else printMessage(11); } else printMessage(5); } else printMessage(3); } else printMessage(2); }\r\n</p><p>&nbsp; else if (input == &quot;검색&quot;) { if (select == &quot;단어&quot; || select == &quot;시작단어&quot;) \r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (!DB.isLoaded())\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Bot.reply(&quot;DB를 자동으로 등록한 후 검색을 시작합니다.&quot;);\r\n</p><p>&nbsp; &nbsp; DB.load();\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp;if (select == &quot;단어&quot;)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; let inputWord = type;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; if (DB.isWord(inputWord))\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Bot.reply\r\n</p><p>&nbsp; &nbsp; &nbsp; (\r\n</p><p>&nbsp; &nbsp; &nbsp; &quot;&lt;&quot; + inputWord + &quot;의 사전 검색 결과 : &quot; + DB.getWordMean(inputWord).length + &quot;개&gt;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; DB.getWordMeanListMessage(inputWord)\r\n</p><p>&nbsp; &nbsp; &nbsp;);\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; else Bot.reply(&quot;사전에 등록되지 않은 단어입니다.&quot;);\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else if (select == &quot;시작단어&quot;)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; let startWord = type;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; if (DB.isStartWord(startWord))\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Bot.reply\r\n</p><p>&nbsp; &nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &nbsp; &quot;&lt;&quot; + startWord + &quot;(으)로 시작하는 단어 &quot; + DB.StartWord[startWord].length + &quot;개&gt;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; DB.StartWord[startWord].join(&quot;, &quot;)\r\n</p><p>&nbsp; &nbsp; &nbsp;);\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; else Bot.reply(startWord + &quot;로 시작하는 단어는 사전에 없습니다.&quot;);\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; }}\r\n</p><p>&nbsp; else if (input == &quot;한방단어&quot;) { if (roomCreat) { if (roomCheck) { if (managerCheck) { if(!gamePower)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (select == &quot;켜기&quot;)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Bot.replyRoom(&quot;한방단어 모드가 켜졌습니다.&quot;);\r\n</p><p>&nbsp; &nbsp; modeOwnCom = true;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else if (select == &quot;끄기&quot;)\r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; Bot.replyRoom(&quot;한방단어 모드가 꺼졌습니다.&quot;);\r\n</p><p>&nbsp; &nbsp; modeOwnCom = false;\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; } else printMessage(4); } else printMessage(7); } else printMessage(3); } else printMessage(2); }\r\n</p><p>&nbsp; else if (input == &quot;AI&quot;)\r\n</p><p>&nbsp; {\r\n</p><p>&nbsp; &nbsp;if (select == &quot;대결&quot; || select == &quot;도전&quot;)  { if (!roomCreat) { if (!gamePower) \r\n</p><p>&nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; if (type == &quot;초보&quot; || type == &quot;중수&quot; || type == &quot;고수&quot;)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;Game.setPlayerAdd(sender);\r\n</p><p>&nbsp; &nbsp; &nbsp;Game.setRoomCreat(room);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;aiCreat = true;\r\n</p><p>&nbsp; &nbsp; &nbsp;aiPower = true;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;switch (type)\r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; case &quot;초보&quot; : aiLevel = 1; aiName += &quot;초보&quot;; break;\r\n</p><p>&nbsp; &nbsp; &nbsp; case &quot;중수&quot; : aiLevel = 2; aiName += &quot;중급&quot;; break;\r\n</p><p>&nbsp; &nbsp; &nbsp; case &quot;고수&quot; : aiLevel = 3; aiName += &quot;고수&quot;; break;\r\n</p><p>&nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;Game.setPlayerAdd(aiName);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom(&quot;잠시 후 게임을 시작합니다!&quot;);\r\n</p><p>&nbsp; &nbsp; &nbsp;Game.start();\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &nbsp; &quot;게임을 시작합니다!\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; &quot;&lt; 플레이어 목록 &gt;\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; Game.getPlayerListMessage() + &quot;\\n\\n&quot; +\r\n</p><p>&nbsp; &nbsp; &nbsp; &quot;[ &quot; + sender + &quot; ] 님은 \\&quot;&quot; + DB.getLastCharMessage(gameLastChar) + &quot;\\&quot;(으)로 시작하는 단어를 입력해 주세요&quot;\r\n</p><p>&nbsp; &nbsp; &nbsp;);\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;} else printMessage(1); } else printMessage(4); } \r\n</p><p>&nbsp; &nbsp;if (select == &quot;추가&quot; || select == &quot;삭제&quot;) { if (roomCreat) { if (roomCheck) { if (managerCheck) {if(!gamePower) { \r\n</p><p>&nbsp; &nbsp;if (select == &quot;추가&quot;)\r\n</p><p>&nbsp; &nbsp;{ \r\n</p><p>&nbsp; &nbsp; /// let list = [&quot;초보&quot;, &quot;중수&quot;, &quot;고수&quot;, &quot;쉬움&quot;, &quot;보통&quot;, &quot;어려움&quot;]\r\n</p><p>&nbsp; &nbsp; if (type == &quot;초보&quot; || type == &quot;중수&quot; || type == &quot;고수&quot;)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;aiCreat = true;\r\n</p><p>&nbsp; &nbsp; &nbsp;aiPower = true;\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;switch (type)\r\n</p><p>&nbsp; &nbsp; &nbsp;{\r\n</p><p>&nbsp; &nbsp; &nbsp; case &quot;초보&quot; : aiLevel = 1; aiName += &quot;초보&quot;; break;\r\n</p><p>&nbsp; &nbsp; &nbsp; case &quot;중수&quot; : aiLevel = 2; aiName += &quot;중급&quot;; break;\r\n</p><p>&nbsp; &nbsp; &nbsp; case &quot;고수&quot; : aiLevel = 3; aiName += &quot;고수&quot;; break;\r\n</p><p>&nbsp; &nbsp; &nbsp;}\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;Game.setPlayerAdd(aiName);\r\n</p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom\r\n</p><p>&nbsp; &nbsp; &nbsp;(\r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &quot;[ &quot; + aiName + &quot; ] 를 게임을 추가했습니다.\\n\\n&quot; + \r\n</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &quot;현재 참가자 : &quot; + gamePlayerList.join(&quot;, &quot;)\r\n</p><p>&nbsp; &nbsp; &nbsp;); \r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; &nbsp;else if (select == &quot;삭제&quot;) \r\n</p><p>&nbsp; &nbsp;{ \r\n</p><p>&nbsp; &nbsp; if (aiCreat)\r\n</p><p>&nbsp; &nbsp; {\r\n</p><p>&nbsp; &nbsp; &nbsp;aiName = &quot;AI:&quot;;\r\n</p><p>&nbsp; &nbsp; &nbsp;aiCreat = false;\r\n</p><p>&nbsp; &nbsp; &nbsp;aiPower = false;\r\n</p><p>&nbsp; &nbsp; &nbsp;Game.setPlayerDelete(aiName);\r\n</p><p>&nbsp; &nbsp; &nbsp;Bot.replyRoom(aiName + &quot; 가 삭제되었습니다.&quot;);\r\n</p><p>&nbsp; &nbsp; }\r\n</p><p>&nbsp; &nbsp; else printMessage(10); \r\n</p><p>&nbsp; &nbsp;}\r\n</p><p>&nbsp; } else printMessage(4); } else printMessage(7); } else printMessage(3); } else printMessage(2); }}}\r\n</p><p>&nbsp;},\r\n</p><p>}\r\n</p><p>&nbsp;</p><p>function response(room, message, sender, isGroupChat, replier, imageDB, packageName, threadId) { try \r\n</p><p>{\r\n</p><p>&nbsp;Bot.reply = (chatting) =&gt; { replier.reply(chatting); };\r\n</p><p>&nbsp;Bot.replyRoom = (chatting) =&gt; { (roomName) ? Api.replyRoom(roomName, chatting) : null; };\r\n</p><p>&nbsp;</p><p>&nbsp;Game.main(room, message, sender);\r\n</p><p>}\r\n</p><p>catch(e)\r\n</p><p>{\r\n</p><p>&nbsp;Bot.reply\r\n</p><p>&nbsp;(\r\n</p><p>&nbsp; &quot;Error Code : &quot; + e.name + &quot;\\n\\n&quot; + \r\n</p><p>&nbsp; &quot;Content : &quot; + e.message + &quot;\\n\\n&quot; +\r\n</p><p>&nbsp; &quot;Line : &quot; + e.lineNumber\r\n</p><p>&nbsp;); \r\n</p><p>}}\r\n</p><p>&nbsp;</p><p>function onStartCompile()\r\n</p><p>{\r\n</p><p>&nbsp;Game.stopGameTimer();\r\n</p><p>&nbsp;Game.stopRoomTimer();\r\n</p><p>}</p>",
            "decorator": {
                "isPlug": false,
                "isShowSuicideSaver": false
            },
            "existScrapAddContent": false,
            "gdid": "90000004_01C2B33B00004C9F00000000",
            "id": 19615,
            "isAutoSourcing": false,
            "isBlind": false,
            "isDeleteParent": false,
            "isEnableExternal": true,
            "isEnableScrap": true,
            "isEnableSocialPlugin": true,
            "isGroupPurchase": false,
            "isMarket": false,
            "isNewComment": false,
            "isNotice": false,
            "isOpen": true,
            "isPersonalTrade": false,
            "isReadable": true,
            "isWriteComment": true,
            "menu": {
                "badMenu": false,
                "badMenuByRestrict": false,
                "boardType": "L",
                "id": 1,
                "menuType": "B",
                "name": "| 자유 게시판 |"
            },
            "readCount": 214,
            "refArticleId": 19615,
            "replyListOrder": "",
            "scrapCount": 0,
            "subject": "소스 오류?질문",
            "template": {
                "isUse": false
            },
            "writeDate": 1592048033353,
            "writer": {
                "id": "jin_walker",
                "image": {
                    "service": "CAFE",
                    "type": "c77_77",
                    "url": "https://ssl.pstatic.net/static/cafe/cafe_pc/default/cafe_profile_77.png"
                },
                "memberLevelIconUrl": "https://cafe.pstatic.net/levelicon/1/13_120.gif",
                "memberLevelName": "챗봇 중수",
                "nick": "진워커"
            }
        },
        "articleId": 19615,
        "attaches": [],
        "authority": {
            "isDoLike": true,
            "isEnableAttachFileDownload": true,
            "isHeadModifiable": false,
            "isModify": false,
            "isMove": false,
            "isRemove": false,
            "isReport": true,
            "isRightClick": true,
            "isSharable": true,
            "isShowLike": true,
            "isShowReply": false,
            "isShowStatistics": false,
            "isStore": false,
            "isWrite": true,
            "isWriteComment": true,
            "isWriteReply": true
        },
        "cafe": {
            "exposeReservation": false,
            "hasPopularArticle": true,
            "id": 29537083,
            "image": {
                "service": "CAFE",
                "type": "f100_100",
                "url": "https://mcafethumb-phinf.pstatic.net/MjAxOTAyMjVfMTg5/MDAxNTUxMDg2MDc1OTY2.umN5Kq9Z2sFRSdAXyJ2sz9UAlE0ofXm-dWJIRbeRbvsg.i_KxnwZ-FvDMQLnpo0ZYMo0Zl9JjOAPGWozW-WnLXJQg.PNG.wltjdqls5304/image.png"
            },
            "introduction": "자바스크립트를 사용하는 카카오톡 봇 관련 커뮤니티 입니다.",
            "isDormant": false,
            "memberCount": 5248,
            "name": "카카오톡 봇 커뮤니티",
            "openType": "O",
            "pcCafeName": "카카오톡 봇 커뮤니티",
            "url": "nameyee",
            "usingMemberLevel": true
        },
        "cafeId": 29537083,
        "comments": {
            "alarm": {
                "isChecked": false,
                "isShow": true
            },
            "disableWriteReason": "",
            "items": []
        },
        "editorVersion": "LEGACY",
        "errorCode": null,
        "heads": [],
        "isReadOnlyMode": false,
        "isW800": true,
        "readOnlyModeInfo": {
            "emergency": false,
            "linkToNoticeURL": "https://section.cafe.naver.com/cafe-home/cafe-notice?noticeId=1650",
            "readOnlyNoticeDuration": "",
            "timeToNotice": false,
            "timeToPreNotice": false
        },
        "tags": []
    }
}