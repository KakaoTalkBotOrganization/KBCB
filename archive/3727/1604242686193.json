{
    "result": {
        "article": {
            "commentCount": 6,
            "contentElements": [],
            "contentHtml": "<div><div>/*&nbsp; MujiBot</div><div>&nbsp; &nbsp; Made by : Muji(yoyolove12)</div><div>&nbsp; &nbsp; Version 0.3</div><div>*/</div><div><br /></div><div>/* 변수 선언 */</div><div>var DataChat = {};</div><div>var MiraiGreet = {};</div><div>var ChatLevel = {};</div><div><br /></div><div>/* 상수선언 */</div><div>const FS=FileStream;</div><div>const MiraiALL = &quot;\\u200b&quot;.repeat(500);</div><div><br /></div><div>/* 상수객체 선언 */</div><div>const Mirai = {};</div><div>const PreChat = {};</div><div>const MiraiBot = {};</div><div><br /></div><div>Mirai.talk = function(msg, replier) {</div><div>&nbsp; replier.reply(&quot;::Mirai msg::\\n&quot; + msg);</div><div>}</div><div><br /></div><div>Mirai.getKkutEn = function(encode){</div><div>&nbsp; var getEncode = (encode) = JSON.parse(org.jsoup.Jsoup.connect(&quot;<a href=\"https://api.zz.am/sqc/encode/\" target=\"_blank\">https://api.zz.am/sqc/encode/</a>&quot; + encode).get().body().toString().replace(/(&lt;([^&gt;]+)&gt;)/g, &quot;&quot;)).res;</div><div>&nbsp; return &quot;[끄투 암호화]\\n&quot; + encode;</div><div>}</div><div>Mirai.getKkutDe = function(decode){</div><div>&nbsp; var getDecode = (decode) = JSON.parse(org.jsoup.Jsoup.connect(&quot;<a href=\"https://api.zz.am/sqc/decode/\" target=\"_blank\">https://api.zz.am/sqc/decode/</a>&quot; + decode).get().body().toString().replace(/(&lt;([^&gt;]+)&gt;)/g, &quot;&quot;)).res;</div><div>&nbsp; return &quot;[끄투 복호화]\\n&quot; + decode;</div><div>}</div><div><br /></div><div>Mirai.getDateText = function()</div><div>{</div><div>&nbsp; return new Date().toLocaleString().split(&quot; GMT+09:00&quot;)</div><div>}</div><div><br /></div><div>Mirai.getMelonChart = function(Result){</div><div>&nbsp; var MiraiData = org.jsoup.Jsoup.connect(&quot;<a href=\"https://www.melon.com/chart/index.htm\" target=\"_blank\">https://www.melon.com/chart/index.htm</a>&quot;).get().html();</div><div>&nbsp; for (i=1;i&lt;=100;i++) {</div><div>&nbsp; &nbsp; Result += &quot;\\n&quot; + i + &quot;순위 [&quot; + MiraiData.split(&apos;class=&quot;rank_wrap&quot;&gt;&apos;)[i].split(&apos;&lt;/div&gt;&apos;)[0].replace(/(&lt;([^&gt;]+)&gt;)/g, &quot;&quot;).trim().replace(/순위 동일 0/g, &quot; - &quot;).replace(/단계 상승 /g, &quot;상승&quot;).replace(/단계 하락 /g, &quot;하락&quot;).replace(/순위 진입/g, &quot; + &quot;) + &quot;]\\n &quot; + MiraiData.split(&apos;&lt;div class=&quot;ellipsis rank01&quot;&gt;&apos;)[i].split(&apos;&lt;/a&gt;&apos;)[0].replace(/(&lt;([^&gt;]+)&gt;)/g, &quot;&quot;).trim() + &quot; - &quot; + MiraiData.split(&apos;&lt;div class=&quot;ellipsis rank02&quot;&gt;&apos;)[i].split(&apos;&lt;/a&gt;&apos;)[0].replace(/(&lt;([^&gt;]+)&gt;)/g, &quot;&quot;).trim()</div><div>&nbsp; }</div><div>&nbsp; return (&quot;멜론차트 실시간 차트&quot; + MiraiALL + &quot;\\n&quot; + Result);</div><div>}</div><div><br /></div><div>function response(room, msg, sender, isGroupChat, replier) {</div><div><br /></div><div>&nbsp; msg = msg.trim();</div><div>&nbsp; room = room = room.trim();</div><div>&nbsp; sender = sender.trim();</div><div>&nbsp; MiraiMsg = msg.split(&quot; &quot;);</div><div><br /></div><div>&nbsp; if(!isGroupChat) return; //단체채팅에서만 작동을 시작</div><div><br /></div><div>&nbsp; if(PreChat[room] == msg) return; //동일한 두 번 데이터를 보내면 가볍게 무시.</div><div>&nbsp; PreChat[room] = msg;</div><div><br /></div><div>&nbsp; MiraiHelp(room, msg, sender, replier);</div><div><br /></div><div>&nbsp; if (MiraiBot[room] == null) MiraiBot[room] = true;</div><div>&nbsp; if (MiraiBot[room] == false) return;</div><div><br /></div><div>&nbsp; /* 봇작동을 중지할경우 작동X */</div><div>&nbsp; MiraiWeb(room, msg, sender, replier);</div><div>&nbsp; MiraiFS(room, msg, sender, replier);</div><div><br /></div><div>}</div><div>function MiraiFS(room, msg, sender, rr) {</div><div>&nbsp; /* 도청 소스 */</div><div>&nbsp; const DataChatPath = &quot;/sdcard/Mirai/DataBase.json&quot;;</div><div><br /></div><div>&nbsp; if(FS.read(DataChatPath)==&quot;&quot;) {</div><div>&nbsp; FS.write(DataChatPath,&quot;{}&quot;)</div><div>&nbsp; DataChat=JSON.parse(FS.read(DataChatPath))</div><div>&nbsp; }</div><div><br /></div><div>&nbsp; if(DataChat[room]==null){DataChat[room]={}}</div><div>&nbsp; if(DataChat[room][sender]==null){DataChat[room][sender]=[]}</div><div><br /></div><div>&nbsp; if(MiraiMsg[0]==&quot;ㅁ도청보기&quot;&amp;&amp;MiraiMsg[1]==null){</div><div>&nbsp; Output = &quot;&quot;;</div><div>&nbsp; for(var Data in DataChat[room]) {</div><div>&nbsp; for(i=0;i&lt;DataChat[room][Data].length;i++){</div><div>&nbsp; Output+=DataChat[room][Data][i][0].Date + &quot;\\n닉네임: &quot; +DataChat[room][Data][i][0].Name + &quot;\\n내용: &quot; + DataChat[room][Data][i][0].Message + &quot;\\n\\n&quot;</div><div>&nbsp; }</div><div>&nbsp; }</div><div>&nbsp; Mirai.talk(&quot;전체 도청한 내용입니다.&quot; + MiraiALL + Output.trim(),rr);</div><div>&nbsp; return;</div><div>&nbsp; }</div><div>&nbsp; if(MiraiMsg[0]==&quot;ㅁ도청보기&quot;){</div><div>&nbsp; Output = &quot;&quot;;</div><div>&nbsp; if(!DataChat[room][msg.substr(6)]){</div><div>&nbsp; Mirai.talk(msg.substr(6) + &quot;님은 도청한 내용이 없습니다.&quot;,rr);</div><div>&nbsp; return;</div><div>&nbsp; }</div><div>&nbsp; for(i=0;i&lt;DataChat[room][msg.substr(6)].length;i++){</div><div>&nbsp; Output+=DataChat[room][msg.substr(6)][i][0].Date + &quot;\\n닉네임: &quot; +DataChat[room][msg.substr(6)][i][0].Name + &quot;\\n내용: &quot; + DataChat[room][msg.substr(6)][i][0].Message + &quot;\\n\\n&quot;</div><div>&nbsp; }</div><div>&nbsp; Mirai.talk(&quot;[&quot; +msg.substr(6)+ &quot;]\\n님은 도청한 내용입니다.&quot; + MiraiALL + Output.trim(),rr)</div><div>&nbsp; return</div><div>&nbsp; }</div><div>&nbsp; if(MiraiMsg[0]==&quot;ㅁ도청삭제&quot;){</div><div>&nbsp; FS.write(DataChatPath,&quot;{}&quot;);</div><div>&nbsp; DataChat=JSON.parse(FS.read(DataChatPath))</div><div>&nbsp; Mirai.talk(&quot;저장된 도청한 내용들을 삭제가 되셨습니다.&quot;,rr);</div><div>&nbsp; return;</div><div>&nbsp; }</div><div>&nbsp; if(msg){</div><div>&nbsp; DataChat[room][sender].push([{&quot;Name&quot;:sender,&quot;Message&quot;:msg,&quot;Date&quot;:Mirai.getDateText()}])</div><div>&nbsp; FS.write(DataChatPath,JSON.stringify(DataChat))</div><div>&nbsp; }</div><div>&nbsp; /* 자동인사 */</div><div>&nbsp; const GreetPath = &quot;/sdcard/Mirai/MiraiGreet.json&quot;</div><div><br /></div><div>&nbsp; if(FS.read(GreetPath)==&quot;&quot;) FS.write(GreetPath,&quot;{}&quot;)</div><div>&nbsp; MiraiGreet=JSON.parse(FS.read(GreetPath))</div><div>&nbsp; if(MiraiGreet[room]==null) MiraiGreet[room]={}</div><div>&nbsp; if(MiraiGreet[room][sender]==null) MiraiGreet[room][sender]={mes:0}</div><div><br /></div><div>&nbsp; if(MiraiGreet[room][sender].mes==0){</div><div>&nbsp; MiraiGreet[room][sender].mes++</div><div>&nbsp; FS.write(GreetPath,JSON.stringify(MiraiGreet))</div><div><br /></div><div>&nbsp; Mirai.talk(&quot;[&quot; + sender + &quot;]&quot; + &quot;님 어서오세요&quot; + &quot;\\n공지사항 읽어주시기 바랍니다.&quot;,rr);</div><div>&nbsp; }</div><div><br /></div><div>&nbsp; /* 맛소금님 리메이크 소스 수정 : Mirai*/</div><div>&nbsp;const LevelPath = &quot;/sdcard/Mirai/MiraiLevel.json&quot;</div><div>&nbsp;if(FS.read(LevelPath)==&quot;&quot;) {</div><div>&nbsp;FS.write(LevelPath,&quot;{}&quot;)</div><div>&nbsp;ChatLevel=JSON.parse(FS.read(LevelPath))</div><div>&nbsp;}</div><div><br /></div><div>&nbsp;if(ChatLevel[room]==null){ChatLevel[room]={}}</div><div>&nbsp;if(ChatLevel[room][sender]==null){ChatLevel[room][sender]={EXP:0,Level:1}}</div><div><br /></div><div>&nbsp;if(MiraiMsg[0]==&quot;ㅁ내정보&quot;){</div><div>&nbsp;Mirai.talk(&quot;[&quot; + sender + &quot; 님의 정보]&quot;+ &quot;\\n레벨 :&quot;+ChatLevel[room][sender].Level+&quot;\\n&quot;+&quot;채팅수 :&quot;+ChatLevel[room][sender].EXP,rr)</div><div>&nbsp;return;</div><div>&nbsp;}</div><div>&nbsp;if(MiraiMsg[0]==&quot;ㅁ채팅통계&quot;){</div><div>&nbsp;result=&quot;&quot;</div><div>&nbsp;var sss = [];</div><div>&nbsp;for (var key in ChatLevel[room]) {</div><div>&nbsp;sss.push([key, ChatLevel[room][key].Level,ChatLevel[room][key].EXP]);</div><div>&nbsp;}</div><div>&nbsp;sss.sort(function(a,b){</div><div>&nbsp;return b[1] - a[1] + b[2] - a[2]</div><div>&nbsp;})</div><div>&nbsp;sss.slice(0,3)</div><div>&nbsp;for(i=0;i&lt;sss.length;i++){</div><div>&nbsp;result+=&quot;\\n닉네임: &quot; + sss[i][0] + &quot; &quot; +&quot;레벨: &quot; +sss[i][1] + &quot; &quot; + &quot;채팅수: &quot;+sss[i][2] + &quot;\\n&quot;</div><div>&nbsp;}</div><div>&nbsp;Mirai.talk(&quot;[총 채팅통계 리스트]&quot; + &quot;\\n\\n&quot; + MiraiALL + result.trim(),rr)</div><div>&nbsp;return;</div><div>&nbsp;}</div><div>&nbsp;ChatLevel[room][sender].EXP++</div><div>&nbsp;if(getLevel(ChatLevel[room][sender].EXP)!=ChatLevel[room][sender].Level){</div><div>&nbsp;ChatLevel[room][sender].Level=getLevel(ChatLevel[room][sender].EXP)</div><div>&nbsp;FS.write(LevelPath,JSON.stringify(ChatLevel))</div><div>&nbsp;Mirai.talk(&quot;[&quot; +sender + &quot;]&quot;+&quot;님 &quot;+ChatLevel[room][sender].Level+&quot;레벨 달성\\n하셨습니다.&quot;,rr)</div><div>&nbsp;}</div><div>&nbsp;if(MiraiMsg[0]==&quot;ㅁ레벨초기화&quot;){</div><div>&nbsp;FS.write(LevelPath,&quot;{}&quot;);</div><div>&nbsp;ChatLevel=JSON.parse(FS.read(LevelPath))</div><div>&nbsp;Mirai.talk(&quot;저장된 레벨이 초기화가 되셨습니다.&quot;,rr);</div><div>&nbsp;return;</div><div>&nbsp;}</div><div>&nbsp;function getLevel(EXP){</div><div>&nbsp;return Math.ceil(EXP/49)</div><div>&nbsp;}</div><div><br /></div><div>}</div><div><br /></div><div>function MiraiWeb(room, msg, sender, rr) {</div><div><br /></div><div>&nbsp; switch (MiraiMsg[0]) {</div><div>&nbsp; &nbsp; case &quot;ㅁ멜론차트&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(Mirai.getMelonChart(),rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ따라하기&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(msg.substr(6),rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ글자길이&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(&quot;[&quot; + String(msg.substr(6)).length + &quot;의 글자수]&quot;,rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ인코딩&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(&quot;[URL인코딩 결과]\\n&quot;&nbsp; + encodeURIComponent(msg.substr(5)),rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ디코딩&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(&quot;[URL디코딩 결과]\\n&quot;&nbsp; + decodeURIComponent(msg.substr(5)),rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ봇백업&quot;:</div><div>&nbsp; &nbsp; &nbsp; var JsPath = FS.read(&quot;/sdcard/katalkbot/Mirai.js&quot;);</div><div>&nbsp; &nbsp; &nbsp; FS.write(&quot;/sdcard/Mirai/Backup/&quot;+ Mirai.getDateText() + &quot;.js&quot;,JsPath);</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(&quot;미라이봇 백업을 했습니다.&quot;,rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ반전&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(java.lang.StringBuilder(MiraiMsg[1]).reverse(),rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ날짜&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(Mirai.getDateText(),rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ암호화&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(Mirai.getKkutEn(MiraiMsg[1]),rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ복호화&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(Mirai.getKkutDe(MiraiMsg[1]),rr);</div><div>&nbsp; &nbsp; &nbsp; break;</div><div><br /></div><div>&nbsp; }</div><div>}</div><div><br /></div><div>function MiraiHelp(room, msg, sender, rr) {</div><div><br /></div><div>&nbsp; switch (MiraiMsg[0]) {</div><div>&nbsp; &nbsp; case &quot;ㅁ온&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(&quot;Mirai가 작동을 시작했습니다.&quot;,rr);</div><div>&nbsp; &nbsp; &nbsp; MiraiBot[room] = true;</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ오프&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(&quot;Mirai가 작동을 중지합니다.&quot;,rr);</div><div>&nbsp; &nbsp; &nbsp; MiraiBot[room] = false;</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ도움말&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(&quot;[Mirai 도움말]\\n&quot; +</div><div>&nbsp; &nbsp; &nbsp; &quot;&quot;,rr)</div><div>&nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; case &quot;ㅁ정보&quot;:</div><div>&nbsp; &nbsp; &nbsp; Mirai.talk(&quot;[미라이봇은 Mirai님이 개발했습니다]\\n&quot; +</div><div>&nbsp; &nbsp; &nbsp; &quot;명령어 목록을 보시려면\\nㅁ도움말를 입력해주시기 바랍니다.&quot;,rr)</div><div>&nbsp; }</div><div>}</div></div><div><br /></div>",
            "decorator": {
                "isPlug": false,
                "isShowSuicideSaver": false
            },
            "existScrapAddContent": false,
            "gdid": "90000004_01C2B33B00000E8F00000000",
            "id": 3727,
            "isAutoSourcing": true,
            "isBlind": false,
            "isDeleteParent": false,
            "isEnableExternal": true,
            "isEnableScrap": true,
            "isEnableSocialPlugin": true,
            "isGroupPurchase": false,
            "isMarket": false,
            "isNewComment": false,
            "isNotice": false,
            "isOpen": true,
            "isPersonalTrade": false,
            "isReadable": true,
            "isWriteComment": true,
            "menu": {
                "badMenu": false,
                "badMenuByRestrict": false,
                "boardType": "L",
                "id": 143,
                "menuType": "B",
                "name": "| 소스 공유 |"
            },
            "readCount": 981,
            "refArticleId": 3727,
            "replyListOrder": "",
            "scrapCount": 0,
            "subject": "미라이 도청 및 자동인사 및 레벨통계 넣엇음",
            "template": {
                "isUse": false
            },
            "writeDate": 1562676783373,
            "writer": {
                "id": "yoyolove12",
                "image": {
                    "service": "CAFE",
                    "type": "c77_77",
                    "url": "https://ssl.pstatic.net/static/cafe/cafe_pc/default/cafe_profile_77.png"
                },
                "memberLevelIconUrl": "https://cafe.pstatic.net/levelicon/1/13_130.gif",
                "memberLevelName": "챗봇 고수",
                "nick": "Mirai"
            }
        },
        "articleId": 3727,
        "attaches": [],
        "authority": {
            "isDoLike": true,
            "isEnableAttachFileDownload": true,
            "isHeadModifiable": false,
            "isModify": false,
            "isMove": false,
            "isRemove": false,
            "isReport": true,
            "isRightClick": true,
            "isSharable": true,
            "isShowLike": true,
            "isShowReply": false,
            "isShowStatistics": false,
            "isStore": false,
            "isWrite": true,
            "isWriteComment": true,
            "isWriteReply": true
        },
        "cafe": {
            "exposeReservation": false,
            "hasPopularArticle": true,
            "id": 29537083,
            "image": {
                "service": "CAFE",
                "type": "f100_100",
                "url": "https://mcafethumb-phinf.pstatic.net/MjAxOTAyMjVfMTg5/MDAxNTUxMDg2MDc1OTY2.umN5Kq9Z2sFRSdAXyJ2sz9UAlE0ofXm-dWJIRbeRbvsg.i_KxnwZ-FvDMQLnpo0ZYMo0Zl9JjOAPGWozW-WnLXJQg.PNG.wltjdqls5304/image.png"
            },
            "introduction": "자바스크립트를 사용하는 카카오톡 봇 관련 커뮤니티 입니다.",
            "isDormant": false,
            "memberCount": 5247,
            "name": "카카오톡 봇 커뮤니티",
            "openType": "O",
            "pcCafeName": "카카오톡 봇 커뮤니티",
            "url": "nameyee",
            "usingMemberLevel": true
        },
        "cafeId": 29537083,
        "comments": {
            "alarm": {
                "isChecked": false,
                "isShow": true
            },
            "disableWriteReason": "",
            "items": [
                {
                    "content": "흠.. 필요하시는분 있을거같아 넣어줌",
                    "id": 63592873,
                    "isArticleWriter": true,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": false,
                    "isRemovable": false,
                    "refId": 63592873,
                    "updateDate": 1562676795000,
                    "writer": {
                        "id": "yoyolove12",
                        "image": {
                            "service": "CAFE",
                            "type": "c77_77",
                            "url": "https://ssl.pstatic.net/static/cafe/cafe_pc/default/cafe_profile_77.png"
                        },
                        "nick": "Mirai"
                    }
                },
                {
                    "content": "const RoomList = [\"s\",\"ss\",\"sss\"]\r\n\r\n  if(RoomList.indexOf(room)!= -1){\r\n\r\n  ~\r\n\r\n}\r\n\r\nroom 지정하는거 필요하신분도있더라구여 올려줌\r\n----------------------------------------------------------------------------\r\n/*  MujiBot\r\n    Made by : Muji(yoyolove12)\r\n    Version 0.3\r\n*/\r\n\r\nconst RoomList = [\"s\",\"ss\",\"sss\"]\r\n\r\n\r\nfunction response(room, msg, sender, isGroupChat, replier) {\r\n\r\n\r\n  if(RoomList.indexOf(room)!= -1){ \r\n\r\n  if(!isGroupChat) return; //단체채팅에서만 작동을 시작\r\n\r\n  if(PreChat[room] == msg) return; //동일한 두 번 데이터를 보내면 가볍게 무시.\r\n  PreChat[room] = msg;\r\n\r\n  MiraiHelp(room, msg, sender, replier);\r\n\r\n  if (MiraiBot[room] == null) MiraiBot[room] = true;\r\n  if (MiraiBot[room] == false) return;\r\n\r\n  /* 봇작동을 중지할경우 작동X */\r\n  MiraiWeb(room, msg, sender, replier);\r\n  MiraiFS(room, msg, sender, replier);\r\n  } // 룸\r\n\r\n}",
                    "id": 63593672,
                    "isArticleWriter": true,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": false,
                    "isRemovable": false,
                    "refId": 63593672,
                    "updateDate": 1562677536000,
                    "writer": {
                        "id": "yoyolove12",
                        "image": {
                            "service": "CAFE",
                            "type": "c77_77",
                            "url": "https://ssl.pstatic.net/static/cafe/cafe_pc/default/cafe_profile_77.png"
                        },
                        "nick": "Mirai"
                    }
                },
                {
                    "content": "이게 자동인사인가요?",
                    "id": 63751417,
                    "isArticleWriter": false,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": true,
                    "isRemovable": false,
                    "refId": 63593672,
                    "updateDate": 1562843974000,
                    "writer": {
                        "id": "kkwoong0729",
                        "image": {
                            "service": "CAFE",
                            "type": "c77_77",
                            "url": "https://ssl.pstatic.net/static/cafe/cafe_pc/default/cafe_profile_77.png"
                        },
                        "nick": "웅이"
                    }
                },
                {
                    "content": "저번에 올리신 소스는 자꾸 오류나네영  옵챗 자동인사",
                    "id": 63751436,
                    "isArticleWriter": false,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": true,
                    "isRemovable": false,
                    "refId": 63593672,
                    "replyMember": {
                        "id": "kkwoong0729",
                        "nick": "웅이"
                    },
                    "updateDate": 1562844003000,
                    "writer": {
                        "id": "kkwoong0729",
                        "image": {
                            "service": "CAFE",
                            "type": "c77_77",
                            "url": "https://ssl.pstatic.net/static/cafe/cafe_pc/default/cafe_profile_77.png"
                        },
                        "nick": "웅이"
                    }
                },
                {
                    "content": "멜론차트부분만 따로 얻을수있을까요?",
                    "id": 65744470,
                    "isArticleWriter": false,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": false,
                    "isRemovable": false,
                    "refId": 65744470,
                    "updateDate": 1565093461000,
                    "writer": {
                        "id": "gfpower00",
                        "image": {
                            "isAnimated": false,
                            "service": "CAFE",
                            "type": "c77_77",
                            "url": "https://cafethumb.pstatic.net/MjAyMDA5MDlfMTIx/MDAxNTk5NjM5OTY3MjI1.z0yw_d8wLfdHew4AQtKlJWjIAU7RMlYTWxSaL_KRZPQg.gFoCVVsXZtlJxSVmNFcZ-tCAX2Ap-ertbpLkAJm5Z5wg.JPEG/externalFile.jpg"
                        },
                        "nick": "JS카톡챗봇"
                    }
                },
                {
                    "content": "Level.json 파일 저장안되요.....\r\n\r\n레벨데이터는 봇 리셋시키면 날라가던데\r\n왜 도청 기능처럼 저장이 안되죠???",
                    "id": 72932922,
                    "isArticleWriter": false,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": false,
                    "isRemovable": false,
                    "refId": 72932922,
                    "updateDate": 1573122982000,
                    "writer": {
                        "id": "jomin398",
                        "image": {
                            "service": "CAFE",
                            "type": "c77_77",
                            "url": "https://ssl.pstatic.net/static/cafe/cafe_pc/default/cafe_profile_77.png"
                        },
                        "nick": "jomin398"
                    }
                }
            ]
        },
        "editorVersion": "LEGACY",
        "errorCode": null,
        "heads": [
            {
                "head": "미니게임",
                "headId": 70
            },
            {
                "head": "RPG",
                "headId": 71
            },
            {
                "head": "파싱",
                "headId": 72
            },
            {
                "head": "혼합",
                "headId": 73
            },
            {
                "head": "기타",
                "headId": 74
            },
            {
                "head": "모듈",
                "headId": 80
            },
            {
                "head": "카톡봇",
                "headId": 83
            },
            {
                "head": "함수",
                "headId": 90
            },
            {
                "head": "고급",
                "headId": 101
            },
            {
                "head": "중급",
                "headId": 102
            },
            {
                "head": "초급",
                "headId": 103
            },
            {
                "head": "태그",
                "headId": 106
            }
        ],
        "isReadOnlyMode": false,
        "isW800": false,
        "readOnlyModeInfo": {
            "emergency": false,
            "linkToNoticeURL": "https://section.cafe.naver.com/cafe-home/cafe-notice?noticeId=1650",
            "readOnlyNoticeDuration": "",
            "timeToNotice": false,
            "timeToPreNotice": false
        },
        "tags": []
    }
}