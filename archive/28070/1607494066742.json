{
    "result": {
        "article": {
            "commentCount": 6,
            "contentHtml": "<div class=\"se-viewer se-theme-default\" lang=\"ko-KR\">\n    <!-- SE_DOC_HEADER_START -->\n    <!--@CONTENTS_HEADER-->\n    <!-- SE_DOC_HEADER_END -->\n    <div class=\"se-main-container\">\n                <div class=\"se-component se-text se-l-default\" id=\"SE-d6c3c0d4-6b35-4fbf-984f-97b526008ae1\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-text se-l-default\">\n                            <div class=\"se-module se-module-text\">\n\n                                    <!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-50c68510-bb51-4277-ac61-fba17efa591f\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-b414aa3d-a37f-4f33-9d67-2568daf5b5a8\">안녕하십니까, 알랑뿡까입니다. 코루틴의 동시성 프로그래밍의 2번째 시간입니다. 좀 많이 기다렸을겁니다. 간단하게 프로세스와 스레드의 개념을 설명해 드리겠습니다. 1편은 </span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-6797a604-8636-4a4d-8911-8855c05ea63f\"><a href=\"https://cafe.naver.com/nameyee/27820\" class=\"se-link\" target=\"_blank\">여기</a></span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-f7a0dd30-b5db-442f-b7dc-11afd7e95da3\">에 있습니다.</span></p><!-- } SE-TEXT -->\n                            </div>\n                        </div>\n                    </div>\n                </div>                <div class=\"se-component se-horizontalLine se-l-default\" id=\"SE-2f051ae9-55e8-49d6-a5a3-dc3a9c177a60\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-horizontalLine se-l-default se-section-align-\">\n                            <div class=\"se-module se-module-horizontalLine\">\n                                <hr class=\"se-hr\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>                <div class=\"se-component se-text se-l-default\" id=\"SE-21fd3939-9f80-44a3-adbd-a7003231ec79\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-text se-l-default\">\n                            <div class=\"se-module se-module-text\">\n\n                                    <!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-3d88efc1-2b47-478c-9c41-3dd968804cba\"><span style=\"\" class=\"se-fs-fs16 se-ff-   \" id=\"SE-1f12e629-6bcb-4760-b8ed-528d7462c596\"><b>프로세스와 스레드의 개념</b></span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-92c437bd-ed9d-4496-8433-2d547ab4671d\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-4963d3a1-f152-41b0-91c1-ea5eb745abf2\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-4f387662-d070-4736-8640-39599b3c4d57\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-f3373ead-bf58-4c56-9dcc-8b4d88661944\">태스크는 큰 실행 단위인 프로세스나 좀 더 작은 실행 단위인 스레드를 말합니다. 하나의 프로그램이 실행되면 프로세스가 시작되는데 프로세스는 실행되는 메모리, 스택, 열린 파일 등을 모두 포함하기 때문에 프로세스 간 문맥 교환(Context-Switching)을 할 때 많은 비용이 듭니다. 반면 스레드는 자신의 스택만 독립적으로 가지고 나머지는 대부분 스레드끼리 공유하므로 문맥 교환 비용이 낮아 프로그래밍에서 더 많이 사용됩니다. 참고로 카카오톡 봇도 스레드로 돌아갑니다. 다만 여러 개의 스레드를 구상하면 코드가 복잡해집니다. 이러한 멀티 스레드(Multi-Thread)를 구현하기 위해서는 저수준에서 운영체제의 개념과 스케줄링, 스레드와 프로세스에 대해 많은 지식과 깊은 이해를 필요로 합니다. 하지만 </span><span style=\"color:#ff0010;\" class=\"se-fs- se-ff-   \" id=\"SE-afac0c8d-ed2a-4cb9-96d6-5efdc7084bc4\"><b>안타깝게도 저처럼 수박겉핥기 식으로만 배운 앝은 지식을 가진 사람들에게는 불가능</b></span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-1965a659-dbf8-4f46-8b32-4e58e9abc08f\">하겠지요. 그래서 말입니다~ 코틀린에선는 응용 프로그래머 입장에서 운영체제를 깊게 이해하지 않더라도 동시성 프로그래밍을 이용할 수 있는 방법인 코루틴 개념을 사용할 수 있게 하는데요, 코루틴은 이러한 전통적인 스레드 개념을 만들지 않고도 좀 더 쉽게 비동기 프로그래밍을 할 수 있게 해줍니다!!! 코루틴은 문맥 교환이 없고 최적화된 비동기 함수를 통해 비선점형으로 작동하는 특징이 있어 </span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-3a1cc497-64e8-4ab1-85e7-92b846f0416f\"><a href=\"https://cafe.naver.com/nameyee/27945\" class=\"se-link\" target=\"_blank\">협력형 멀티태스킹</a></span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-61a4f87a-5db5-456a-a980-59981fb9c576\">을 구현할 수 있게 해 줍니다. 협력</span><span style=\"color:#000000;background-color:#ffffff;\" class=\"se-fs- se-ff-system se-weight-unset se-style-unset \" id=\"SE-9d2b797a-249a-4009-bfd2-b5656906cb69\">·선점</span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-4327405c-ff5e-4421-a438-68145e8d7a2a\">형 멀티태스킹(Cooperative</span><span style=\"color:#000000;background-color:#ffffff;\" class=\"se-fs- se-ff-system se-weight-unset se-style-unset \" id=\"SE-70c5135c-ed6f-47b7-be57-5a53540f6d58\">·Preemptive Multitasking</span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-43b5fb10-4157-425d-875b-4e14677c7075\">)에 대해 이미 상식에서 정리해논 바 있으니 한번씩 보시기를 추천드립니다.</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-5b9b6046-ef8c-4339-a248-c4a9283fc2e3\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-e6fd71fc-a9d3-4068-b9be-618be44c4dde\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-50599268-7031-476a-8c8e-0d7c5ff2933e\"><span style=\"\" class=\"se-fs-fs16 se-ff-   \" id=\"SE-36c1be6d-a8ca-428d-ba65-0b53715a8c52\"><b>스레드 생성해보기</b></span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-9cdc4697-0259-4226-907b-1cf108f206ab\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-0a580384-6a23-4959-8378-f1ee75f11b4b\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-354da8dc-a55c-4732-97e5-9fe6f7836dc3\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-f95ccc26-cb5d-4270-a5da-c3f21e825fb1\">코틀린의 코루틴 프로그래밍을 해 보기 전에 자바에서 사용하던 스레드를 생성하는 방법을 슬쩍 알아봅시다. 자바에서는 스레드 루틴을 만들려면 Thread 클래스를 상속받거나 Runnnable 인터페이스를 구현합니다. 물론 이러한 자바 클래스들은 코틀린에서도 사용할 수 있습니다. 다음 코드를 봅시다.</span></p><!-- } SE-TEXT -->\n                            </div>\n                        </div>\n                    </div>\n                </div>                <div class=\"se-component se-code se-l-code_black\" id=\"SE-7bc8b973-d609-4475-80ea-7ef5bb4ec7e7\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-code se-l-code_black\">\n                            <div class=\"se-module se-module-code se-fs-fs13\">\n                                <div class=\"se-code-source\">\n                                    <div class=\"__se_code_view language-javascript\">// Thread 클래스를 상속받아 구현하기\nclass SimpleThread: Thread() {\n  override fun run() {\n    println(&quot;Current Threads : ${Thread.currentThread()}&quot;)\n  }\n}\n// Runnable 인터페이스로부터 run() 메서드 구현하기\nclass SimpleRunnable: Runnable() {\n  override fun run() {\n    println(&quot;Current Threads : ${Thread.currentThread()}&quot;)\n  }\n}\n\nfun main() {\n  val thread &#x3D; SimpleThread()\n  thread.start()\n\n  val runnable &#x3D; SimpleRunnable()\n  val thread1 &#x3D; Thread(runnable)\n  thread1.start()\n}\n\n/*\n[실행 결과]\n\nCurrent Threads: Thread[Thread-0,5,main]\nCurrent Threads: Thread[Thread-1,5,main]\n*/</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <script type=\"text/data\" class=\"__se_module_data\" data-module='{\"type\":\"v2_code\", \"id\" : \"SE-7bc8b973-d609-4475-80ea-7ef5bb4ec7e7\"}'></script>\n                </div>                <div class=\"se-component se-text se-l-default\" id=\"SE-4e938386-c723-4f91-ac40-29c65c1f6d95\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-text se-l-default\">\n                            <div class=\"se-module se-module-text\">\n\n                                    <!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-169a568a-4b57-4b3d-a1e9-c122aa6cbed5\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-9f3680c6-1a91-447f-a369-b4ec6b2b0296\">Thread 클래스를 직접 상속받아 구현한 경우에는 다중 상속이 허용되지 않기 때문에 Thread 이외의 클래스를 상속할 수 없습니다. 하지만 두번째는 Runnable 인터페이스를 구현한 것이기 때문에 다른 클래스를 상속할 수도 있습니다. 스레드에서 실행할 코드는 run() 메서드를 오버라이딩 해서 구현해 둡니다. 이것을 실행하려면 해당 클래스 객체의 start() 메서드를 호출하면 각 스레드의 run() 본문을 수행하는 독립된 실행 루틴이 동작하게 됩니다.</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-663a97ef-2619-4914-ab5c-524998107dc2\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-1d86c263-7271-4090-80c4-ea5e06c5ca5f\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-f134bbe4-461a-4ee7-bd26-a0fd01c4c384\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-5bedbf5b-0e9c-4c4e-84df-091a37124293\">익명 객체와 람다식의 코드는 다음과 같습니다.</span></p><!-- } SE-TEXT -->\n                            </div>\n                        </div>\n                    </div>\n                </div>                <div class=\"se-component se-code se-l-code_black\" id=\"SE-56e1d032-3d96-4ed4-819e-a85d353bb6ed\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-code se-l-code_black\">\n                            <div class=\"se-module se-module-code se-fs-fs13\">\n                                <div class=\"se-code-source\">\n                                    <div class=\"__se_code_view language-javascript\">// 익명(anonymous) 객체 - 클래스의 객체를 만들지 않고도 가능\nobject : Thread() {\n  override fun run() {\n    println(&quot;Current Threads : ${Thread.currentThread()}&quot;)\n  }\n}.start()\n\n// 람다식 - Runnable을 전달함(소괄호 생략 가능)\nThread({\n  println(&quot;Current Threads(lambda) : ${Thread.currentThread()}&quot;)\n}).start()</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <script type=\"text/data\" class=\"__se_module_data\" data-module='{\"type\":\"v2_code\", \"id\" : \"SE-56e1d032-3d96-4ed4-819e-a85d353bb6ed\"}'></script>\n                </div>                <div class=\"se-component se-text se-l-default\" id=\"SE-04f0ff31-0924-46c4-af0f-c90d6fbe7474\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-text se-l-default\">\n                            <div class=\"se-module se-module-text\">\n\n                                    <!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-5f5ec9e6-67f7-49ad-b12a-f03b5bb4ac96\"><span style=\"\" class=\"se-fs-fs16 se-ff-   \" id=\"SE-921b98ff-5c88-40dd-9f91-8c32d76f1aeb\"><b>사용자 함수를 통한 스레드 생성하기</b></span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-bf31eae4-40d1-4605-a4ba-d46ba66210ea\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-769920c8-4bfe-43b5-af0a-075e4b0dc056\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-701c22fb-b9d3-49da-a5c0-2239df3ab6d7\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-de0225c5-3a9b-45a3-be02-7adbe49851e3\">우선 아래 코드를 봅시다.</span></p><!-- } SE-TEXT -->\n                            </div>\n                        </div>\n                    </div>\n                </div>                <div class=\"se-component se-code se-l-code_black\" id=\"SE-fbe7d100-b7b4-4cdb-8bdc-80550d4d1c1c\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-code se-l-code_black\">\n                            <div class=\"se-module se-module-code se-fs-fs13\">\n                                <div class=\"se-code-source\">\n                                    <div class=\"__se_code_view language-javascript\">public fun thread(start: Boolean &#x3D; true, isDaemon: Boolean &#x3D; false, contextClassLoader: ClassLoader? &#x3D; null, name: String? &#x3D; null, priority: Int &#x3D; -1, block: () -&gt; Unit): Thread {\n\n  val thread &#x3D; object : Thread() {\n    public override fun run() {\n      block()\n    }\n  }\n\n  if(isDaemon) thread.isDaemon &#x3D; true  // 백그라운드 실행 여부\n  if(priority &gt; 0) thread.priority &#x3D; priority  // 우선순위 (1: 낮음 ~ 5: 보통 ~ 10: 높음)\n  if(name !&#x3D; null) thread.name &#x3D; name  // 이름\n  if(contextClassLoader !&#x3D; null) thread.contextClassLoader &#x3D; contextClassLoader\n  if(start) thread.start()\n\n  return thread\n\n}\n\nfun main() {\n\n  thread(start &#x3D; true) {\n    println(&quot;Current Threads(Custom function): ${Thread.currentThread}&quot;)\n    println(&quot;Priority: ${Thread.currentThread().priority}&quot;)  // 기본값은 5\n    println(&quot;Name: ${Thread.currentThread().name}&quot;)\n    println(&quot;isDaemon: ${Thread.currentThread().isDaemon}&quot;)\n  }\n\n}\n\n/*\n[실행 결과]\n\nCurrent Threads(Custom function): Thread[Thread-0,5,main]\nPriority: 5\nName : Thread-0\nisDaemon: false\n*/</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <script type=\"text/data\" class=\"__se_module_data\" data-module='{\"type\":\"v2_code\", \"id\" : \"SE-fbe7d100-b7b4-4cdb-8bdc-80550d4d1c1c\"}'></script>\n                </div>                <div class=\"se-component se-text se-l-default\" id=\"SE-37f9743f-2623-4166-b0d6-a5e0740d6810\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-text se-l-default\">\n                            <div class=\"se-module se-module-text\">\n\n                                    <!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-bf7bd924-c0ed-48c7-9150-4e9734250f38\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-c46134cb-0f33-4fb6-85f8-37af32c570c9\">이렇게 하면 스레드의 우선순위. 백그라운드 여부, 이름 등 스레드가 가져야 할 각종 옵션 변수를 손쉽게 설정할 수 있습니다. 함수에서 옵션을 비우면 기본값이 사용되기 때문에 문제 없습니다. 따라서 </span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-9f507246-0f56-4896-817f-78246b1a7829\"><a href=\"https://cafe.naver.com/nameyee/27818\" class=\"se-link\" target=\"_blank\">보일러플레이트</a></span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-2ce7fe74-f818-467a-bd15-5f909ef77b9b\">한 코드를 숨길 수 있으므로 thread() 함수만으로 깔끔한 코딩이 가능합니다.</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-64536a6c-77fa-43ba-9283-4b64eb075c0b\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-4e965460-b180-460f-9ba1-41c9648dd2c2\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-a0d49021-35e9-41ee-a3d9-d6196c3e0cf5\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-4d696a4c-5728-48dd-bf63-da7916cadc0a\">우선순위(priority)는 보통 운영체제에 따라 다르지만 JVM에서는 총 10단계의 우선순위 레벨을 가질 수 있습니다. 값이 높으면 높은 우선순위로 먼저 처리하게 됩니다. 기본값은 5가 할당됩니다.</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-ff14dd63-0b39-401c-9f5b-b15a5b47b944\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-4043b3da-57fc-419c-862b-e5f2c8e5b630\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-1b4ca52a-e944-4dac-9338-3b07608aa6a8\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-9a592f37-13a8-41f1-8427-35659e72c2a8\"><a href=\"https://cafe.naver.com/nameyee/27273\" class=\"se-link\" target=\"_blank\">데몬</a></span><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-63cd89ae-7733-48a9-a77f-9913645829e9\"> 여부를 결정하는 isDaemon은 백그라운드 서비스를 제공하기 위한 슬드를 생성합니다. 보통 데몬 스레드는 운영체제에 의해 낮은 우선순위가 부여됩니다.</span><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-cbb9003a-f4a4-41e7-baed-5deb8ab81307\"><strike>링크를 많이 거는 것이 나무위키와 유사한 것은 기분탓입니다?</strike></span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-de979a84-305f-44e8-93cd-bc5066129a49\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-16079afc-df79-439c-824e-83d09ed3791b\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-c839b80d-274f-46ad-a140-9da29da8787b\"><span style=\"\" class=\"se-fs-fs16 se-ff-   \" id=\"SE-8f6ace29-7dde-4128-a217-0412a26e9188\"><b>스레드 풀 사용해보기</b></span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-6eed77c7-4622-4c4a-a7ea-996880478ae7\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-4e147cf4-2a80-43fc-80f6-107602b3cca7\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-84b70428-94e2-42fd-9c96-ba678de95bb0\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-a25881e4-02b6-46d8-a2b1-6b48be1a6b81\">마지막입니다. 애플리케이션(앱)이 비즈니스 로직을 설계할 때는 스레드가 자주 재사용됩니다. 따라서 몇 개의 스레드를 먼저 만들어 놓고 필요에 따라 재사용하도록 설계할 수 있습니다. 보통 이런 경우에는 newFixedThreadPool()이라는 함수로 스레드를 인자의 수만큼 만들고 작업을 수행할 때 여기에서 재사용 가능한 스레드를 고르게 합니다. 예를 들어 n개의 스레드로 특정 백그라운드 서비스를 하도록 만든다고 했을 때 다음과 같은 코드를 작성할 수 있습니다.</span></p><!-- } SE-TEXT -->\n                            </div>\n                        </div>\n                    </div>\n                </div>                <div class=\"se-component se-code se-l-code_black\" id=\"SE-541e1248-b85d-45fa-9dbb-54e273ef9cff\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-code se-l-code_black\">\n                            <div class=\"se-module se-module-code se-fs-fs13\">\n                                <div class=\"se-code-source\">\n                                    <div class=\"__se_code_view language-javascript\">val myService:ExecutorService &#x3D; Executors.newFixedThreadPool(n)\nvar i &#x3D; 0\n\nwhile(i &lt; items.size) {  // 아주 큰 데이터를 처리할 때\n  val item &#x3D; items[i]\n  myService.submit {\n    processItem(item)  // 여기서 아주 긴 시간동안 처리하는 경우\n  }\n  i +&#x3D; 1\n}</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <script type=\"text/data\" class=\"__se_module_data\" data-module='{\"type\":\"v2_code\", \"id\" : \"SE-541e1248-b85d-45fa-9dbb-54e273ef9cff\"}'></script>\n                </div>                <div class=\"se-component se-horizontalLine se-l-default\" id=\"SE-e78e5c34-3449-48f1-a4df-97a45a358126\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-horizontalLine se-l-default se-section-align-\">\n                            <div class=\"se-module se-module-horizontalLine\">\n                                <hr class=\"se-hr\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>                <div class=\"se-component se-text se-l-default\" id=\"SE-1cfbfbe9-2fe5-4053-82ca-f63300aa4cc2\">\n                    <div class=\"se-component-content\">\n                        <div class=\"se-section se-section-text se-l-default\">\n                            <div class=\"se-module se-module-text\">\n\n                                    <!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-a181f820-e490-4d6a-800a-7f84d62a7337\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-03f7b81c-cc8a-40d8-839e-8cfb1800d0b2\">지금까지 기본적인 동시성 프로그래밍의 필요성과 용어, 이전에 자주 사용하던 스레드의 생성 방법읠 간단히 살펴봤습니다. 사실 코루틴을 사용하면 이런 방식을 사용하지 않아도 됩니다. 다만 기존의 동시성 프로그래밍의 방법에 대해 알아 둘 필요는 있습니다. 다음시간부터는 코루틴을 설명하도록 하겠습니다. </span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-ec252b1e-de0d-456c-be24-3079c2b1ba8b\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-ebd38ef1-6f76-4239-850b-d565f7fb65e5\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-6d1d7949-d951-4df2-8db1-65500a56039d\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-099c0dcb-ce33-4f2d-9935-8a53946e76d1\">??? : 지금까지는 서론이였다.</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-b2e6e8c4-d638-4cf9-81d0-08f9083a4851\"><span style=\"\" class=\"se-fs-fs11 se-ff-   \" id=\"SE-ba413719-7b82-46e7-a529-419b443865e2\">​</span></p><!-- } SE-TEXT --><!-- SE-TEXT { --><p class=\"se-text-paragraph se-text-paragraph-align- \" style=\"\" id=\"SE-5c613bba-f0eb-4d82-9b06-7b21288ef4a1\"><span style=\"\" class=\"se-fs- se-ff-   \" id=\"SE-4b5f128d-adf4-4ce5-8286-977577c2ccd1\">이상입니다.</span></p><!-- } SE-TEXT -->\n                            </div>\n                        </div>\n                    </div>\n                </div>    </div>\n</div>",
            "customElements": [],
            "decorator": {
                "isPlug": false,
                "isShowSuicideSaver": false
            },
            "existScrapAddContent": false,
            "gdid": "90000004_01C2B33B00006DA600000000",
            "head": "코틀린",
            "headId": 112,
            "id": 28070,
            "isAutoSourcing": true,
            "isBlind": false,
            "isDeleteParent": false,
            "isEnableExternal": true,
            "isEnableScrap": true,
            "isEnableSocialPlugin": true,
            "isGroupPurchase": false,
            "isMarket": false,
            "isNewComment": false,
            "isNotice": false,
            "isOpen": true,
            "isPersonalTrade": false,
            "isReadable": true,
            "isWriteComment": true,
            "menu": {
                "badMenu": false,
                "badMenuByRestrict": false,
                "boardType": "L",
                "id": 208,
                "menuType": "B",
                "name": "| Kotlin, Java |"
            },
            "readCount": 34,
            "refArticleId": 28070,
            "replyListOrder": "",
            "scrapCount": 0,
            "subject": "코틀린 심화강좌 - 1. 코루틴 #2 동시성 프로그래밍_2",
            "template": {
                "isUse": false
            },
            "writeDate": 1607307812120,
            "writer": {
                "id": "hozinryu",
                "image": {
                    "isAnimated": false,
                    "service": "BLOG",
                    "type": "c77_77",
                    "url": "https://blogpfthumb-phinf.pstatic.net/20200828_147/hozinryu_1598577910916IfMMA_PNG/image.png"
                },
                "memberLevelIconUrl": "https://cafe.pstatic.net/levelicon/1/13_140.gif",
                "memberLevelName": "챗봇 마스터",
                "nick": "알랑뿡까"
            }
        },
        "articleId": 28070,
        "attaches": [],
        "authority": {
            "isDoLike": true,
            "isEnableAttachFileDownload": true,
            "isHeadModifiable": false,
            "isModify": false,
            "isMove": false,
            "isRemove": false,
            "isReport": true,
            "isRightClick": true,
            "isSharable": true,
            "isShowLike": true,
            "isShowReply": false,
            "isShowStatistics": false,
            "isStore": false,
            "isWrite": true,
            "isWriteComment": true,
            "isWriteReply": true
        },
        "cafe": {
            "exposeReservation": false,
            "hasPopularArticle": true,
            "id": 29537083,
            "image": {
                "service": "CAFE",
                "type": "f100_100",
                "url": "https://mcafethumb-phinf.pstatic.net/MjAxOTAyMjVfMTg5/MDAxNTUxMDg2MDc1OTY2.umN5Kq9Z2sFRSdAXyJ2sz9UAlE0ofXm-dWJIRbeRbvsg.i_KxnwZ-FvDMQLnpo0ZYMo0Zl9JjOAPGWozW-WnLXJQg.PNG.wltjdqls5304/image.png"
            },
            "introduction": "자바스크립트를 사용하는 카카오톡 봇 관련 커뮤니티 입니다.",
            "isDormant": false,
            "memberCount": 5459,
            "name": "카카오톡 봇 커뮤니티",
            "openType": "O",
            "pcCafeName": "카카오톡 봇 커뮤니티",
            "url": "nameyee",
            "usingMemberLevel": true
        },
        "cafeId": 29537083,
        "comments": {
            "alarm": {
                "isChecked": false,
                "isShow": true
            },
            "disableWriteReason": "",
            "items": [
                {
                    "content": "코루틴 대신 스레드가 필요한 상황에는 어떤 경우가 있는지 궁금하네요.\n좋은 강좌 감사합니단",
                    "id": 111020156,
                    "isArticleWriter": false,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": false,
                    "isRemovable": false,
                    "refId": 111020156,
                    "updateDate": 1607309305000,
                    "writer": {
                        "id": "kenis7",
                        "image": {
                            "isAnimated": false,
                            "service": "BLOG",
                            "type": "c77_77",
                            "url": "https://blogpfthumb-phinf.pstatic.net/20200309_221/kenis7_1583741688026EvIWn_JPEG/image.jpg"
                        },
                        "nick": "Steve28"
                    }
                },
                {
                    "content": "스레드는 비동기적이므로 비동기 프로그래밍을 할 때 필요합니다. 참고로 비동기 프로그램은 별로 안씁니다.",
                    "id": 111020665,
                    "isArticleWriter": true,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": true,
                    "isRemovable": false,
                    "refId": 111020156,
                    "updateDate": 1607309643000,
                    "writer": {
                        "id": "hozinryu",
                        "image": {
                            "isAnimated": false,
                            "service": "BLOG",
                            "type": "c77_77",
                            "url": "https://blogpfthumb-phinf.pstatic.net/20200828_147/hozinryu_1598577910916IfMMA_PNG/image.png"
                        },
                        "nick": "알랑뿡까"
                    }
                },
                {
                    "content": "JS에서는 자연스레 비동기적으로 할 수 있지요 흐흐",
                    "id": 111028387,
                    "isArticleWriter": false,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": false,
                    "isRemovable": false,
                    "refId": 111028387,
                    "updateDate": 1607315475000,
                    "writer": {
                        "id": "hanbyeul04",
                        "image": {
                            "isAnimated": false,
                            "service": "BLOG",
                            "type": "c77_77",
                            "url": "https://blogpfthumb-phinf.pstatic.net/20201127_228/hanbyeul04_1606440127364ad9Q5_JPEG/image.jpg"
                        },
                        "nick": "핀밀크"
                    }
                },
                {
                    "content": "비동기적은 다른 스레드에 의해 값이 변경될 수 있어서 꺼려해야합니다........",
                    "id": 111029115,
                    "isArticleWriter": true,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": true,
                    "isRemovable": false,
                    "refId": 111028387,
                    "updateDate": 1607315990000,
                    "writer": {
                        "id": "hozinryu",
                        "image": {
                            "isAnimated": false,
                            "service": "BLOG",
                            "type": "c77_77",
                            "url": "https://blogpfthumb-phinf.pstatic.net/20200828_147/hozinryu_1598577910916IfMMA_PNG/image.png"
                        },
                        "nick": "알랑뿡까"
                    }
                },
                {
                    "content": "js는 싱글스레드인데도 비동기적이라는 말도 안되는 그런 게 있습니다",
                    "id": 111029400,
                    "isArticleWriter": false,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": true,
                    "isRemovable": false,
                    "refId": 111028387,
                    "replyMember": {
                        "id": "hozinryu",
                        "nick": "알랑뿡까"
                    },
                    "updateDate": 1607316217000,
                    "writer": {
                        "id": "hanbyeul04",
                        "image": {
                            "isAnimated": false,
                            "service": "BLOG",
                            "type": "c77_77",
                            "url": "https://blogpfthumb-phinf.pstatic.net/20201127_228/hanbyeul04_1606440127364ad9Q5_JPEG/image.jpg"
                        },
                        "nick": "핀밀크"
                    }
                },
                {
                    "content": "동기화함수, 뮤텍스",
                    "id": 111045004,
                    "isArticleWriter": false,
                    "isDeleted": false,
                    "isNew": false,
                    "isRef": true,
                    "isRemovable": false,
                    "refId": 111028387,
                    "replyMember": {
                        "id": "hozinryu",
                        "nick": "알랑뿡까"
                    },
                    "updateDate": 1607328156000,
                    "writer": {
                        "id": "bomzlog",
                        "image": {
                            "service": "CAFE",
                            "type": "c77_77",
                            "url": "https://ssl.pstatic.net/static/cafe/cafe_pc/default/cafe_profile_77.png"
                        },
                        "nick": "bhmj"
                    }
                }
            ]
        },
        "editorVersion": "SE_ONE",
        "errorCode": null,
        "heads": [
            {
                "head": "코틀린",
                "headId": 112
            },
            {
                "head": "자바",
                "headId": 113
            }
        ],
        "isReadOnlyMode": false,
        "isW800": true,
        "readOnlyModeInfo": {
            "emergency": false,
            "linkToNoticeURL": "https://section.cafe.naver.com/cafe-home/cafe-notice?noticeId=1659",
            "readOnlyNoticeDuration": "",
            "timeToNotice": false,
            "timeToPreNotice": false
        },
        "tags": [
            "Kotlin",
            "코틀린"
        ]
    }
}